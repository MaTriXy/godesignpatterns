<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 <title>Android Design Patterns</title>
 <link href="/feed.atom" rel="self" />
 <link href="/"/>
 <id>/</id>
 <author>
   <name>Alex Lockwood</name>
 </author>
 <updated>2014-04-13T16:06:12-04:00</updated>
 
 <entry>
   <title type="html">Thread Scheduling in Android</title>
   <link href="/2014/01/thread-scheduling-in-android.html"/>
   <id>/2014/01/thread-scheduling-in-android.html</id>
   <published>2014-01-13T00:00:00-05:00</published>
   <updated>2014-01-13T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;This post will give an overview of how thread scheduling works in Android, and will briefly
demonstrate how to explicitly set
&lt;a href=&quot;http://developer.android.com/reference/android/os/Process.html&quot;&gt;thread priorities&lt;/a&gt;
yourself to ensure that your application remains responsive even as multiple threads
run in the background.&lt;/p&gt;

&lt;p&gt;For those who are unfamiliar with the term, a &lt;em&gt;thread scheduler&lt;/em&gt; is the part of the operating system
in charge of deciding which threads in the system should run, when, and for how long. Android&amp;#39;s thread
scheduler uses two main factors to determine how threads are scheduled across the entire
system: &lt;em&gt;nice values&lt;/em&gt; and &lt;em&gt;cgroups&lt;/em&gt;.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post will give an overview of how thread scheduling works in Android, and will briefly
demonstrate how to explicitly set
&lt;a href=&quot;http://developer.android.com/reference/android/os/Process.html&quot;&gt;thread priorities&lt;/a&gt;
yourself to ensure that your application remains responsive even as multiple threads
run in the background.&lt;/p&gt;

&lt;p&gt;For those who are unfamiliar with the term, a &lt;em&gt;thread scheduler&lt;/em&gt; is the part of the operating system
in charge of deciding which threads in the system should run, when, and for how long. Android&amp;#39;s thread
scheduler uses two main factors to determine how threads are scheduled across the entire
system: &lt;em&gt;nice values&lt;/em&gt; and &lt;em&gt;cgroups&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Nice values&lt;/h3&gt;

&lt;p&gt;Similar to how they are used in Linux&amp;#39;s completely fair scheduling policy, &lt;em&gt;nice values&lt;/em&gt; in Android
are used as a measure of a thread&amp;#39;s priority. Threads with a higher nice value (i.e., lower priority,
as in they are being &amp;quot;nice&amp;quot; to other threads in the system) will run less often than
those with lower nice values (i.e., higher priority). The two most important of these are the
&lt;a href=&quot;http://developer.android.com/reference/android/os/Process.html#THREAD_PRIORITY_DEFAULT&quot;&gt;default&lt;/a&gt;
and &lt;a href=&quot;http://developer.android.com/reference/android/os/Process.html#THREAD_PRIORITY_BACKGROUND&quot;&gt;background&lt;/a&gt;
thread priorities. Intuitively, thread priorities should be chosen
inverse-proportionally to the amount of work the thread is expected to do: the more work the
thread will do, the less favorable thread priority it should get so that it doesn&amp;#39;t
starve the system. For this reason, user interface threads (such as the main thread of a foreground &lt;code&gt;Activity&lt;/code&gt;) 
are typically given a default priority, whereas background threads (such as a thread executing an &lt;code&gt;AsyncTask&lt;/code&gt;)
are typically given a background priority.&lt;/p&gt;

&lt;p&gt;Nice values are theoretically important because they help reduce background work that might otherwise
interrupt the user interface. In practice, however, they alone are not sufficient. For example, consider
twenty background threads and a single foreground thread driving the UI. Despite their low
individual priorities, collectively the twenty background threads will still likely impact the performance
of the single foreground thread, resulting in lag and hurting the user experience. Since at any given moment
several applications could potentially have background threads waiting to run, the Android OS
must somehow address these scenarios. Enter &lt;em&gt;cgroups&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Cgroups&lt;/h3&gt;

&lt;p&gt;To address this problem, Android enforces an even stricter foreground vs. background scheduling policy
using Linux &lt;a href=&quot;http://en.wikipedia.org/wiki/Cgroups&quot;&gt;&lt;em&gt;cgroups&lt;/em&gt;&lt;/a&gt; (control groups). Threads with
background priorities are implicitly moved into a background cgroup, where they are
limited to only a small percentage&lt;sup&gt;&lt;a href=&quot;#footnote1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; of the available
CPU if threads in other groups are busy. This separation allows background threads to make some
forward progress, without having enough of an impact on the foreground threads to be visible
to the user.&lt;/p&gt;

&lt;p&gt;In addition to automatically assigning low-priority threads to the background cgroup, Android ensures that all
threads belonging to applications not currently running in the foreground are implicitly moved to the background cgroup as well. This automatic assignment of application threads to cgroups ensures that the current foreground
application thread will always be the priority, regardless of how many applications are running in the background.&lt;/p&gt;

&lt;h3&gt;Setting Priorities with &lt;code&gt;Process#setThreadPriority(int)&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;For the most part, the Android APIs already assign worker threads a background priority for you
(for example, see the source code for
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/os/HandlerThread.java&quot;&gt;&lt;code&gt;HandlerThread&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/os/AsyncTask.java&quot;&gt;&lt;code&gt;AsyncTask&lt;/code&gt;&lt;/a&gt;). It is important to remember, however, that this will not always be the case.
&lt;code&gt;Thread&lt;/code&gt;s and &lt;code&gt;ExecutorService&lt;/code&gt;s that are instantiated on the main UI thread, for example,
will inherit a default, foreground priority, making lag more likely and possibly hurting
the application&amp;#39;s performance. In these cases, you should &lt;em&gt;always&lt;/em&gt; remember to set the thread&amp;#39;s
priority by calling
&lt;a href=&quot;https://developer.android.com/reference/android/os/Process.html#setThreadPriority(int)&quot;&gt;&lt;code&gt;Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND)&lt;/code&gt;&lt;/a&gt;
before the &lt;code&gt;Thread&lt;/code&gt; is run. Doing so is straightforward, as shown in the example below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setThreadPriority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;THREAD_PRIORITY_BACKGROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As always, thanks for reading, and leave a comment if you have any questions. Don&amp;#39;t forget to +1 this blog post too! &lt;/p&gt;

&lt;hr class=&quot;footnote-divider&quot; /&gt;

&lt;p&gt;&lt;sup id=&quot;footnote1&quot;&gt;1&lt;/sup&gt; This percentage was 5% at the time of this writing, though it is possible that this value could change in the future. As of Android 4.4.2, cgroup mount points are created and initialized at boot-up in &lt;a href=&quot;https://android.googlesource.com/platform/system/core/+/android-sdk-4.4.2_r1/rootdir/init.rc&quot;&gt;&lt;code&gt;/system/core/rootdir/init.rc&lt;/code&gt;&lt;/a&gt; (see lines 100-123). &lt;a href=&quot;#ref1&quot; title=&quot;Jump to footnote 1.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Redesigning Android Design Patterns</title>
   <link href="/2014/01/redesigning-android-design-patterns.html"/>
   <id>/2014/01/redesigning-android-design-patterns.html</id>
   <published>2014-01-08T00:00:00-05:00</published>
   <updated>2014-03-11T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;A couple weeks ago, I began the ambitious task of rewriting this blog from scratch.
Today, I&amp;#39;m happy to introduce a brand new look: one that is &lt;em&gt;cleaner&lt;/em&gt;, &lt;em&gt;faster&lt;/em&gt;, and more
&lt;em&gt;responsive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Several of the major changes are listed below. If this is your first time visiting this blog, you can find the old
version of the site &lt;a href=&quot;http://androiddesignpatterns.blogspot.com&quot;&gt;here&lt;/a&gt; to use as a reference.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;A couple weeks ago, I began the ambitious task of rewriting this blog from scratch.
Today, I&amp;#39;m happy to introduce a brand new look: one that is &lt;em&gt;cleaner&lt;/em&gt;, &lt;em&gt;faster&lt;/em&gt;, and more
&lt;em&gt;responsive&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Several of the major changes are listed below. If this is your first time visiting this blog, you can find the old
version of the site &lt;a href=&quot;http://androiddesignpatterns.blogspot.com&quot;&gt;here&lt;/a&gt; to use as a reference.&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Goodbye Blogger, hello Jekyll.&lt;/strong&gt; I&amp;#39;ve never been a huge fan of Blogger and was eager to
try something new. After a bit of research I decided to give &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;
a shot. Unlike Blogger,
which dynamically parses content and templates on each request, Jekyll generates the entire
website once beforehand to serve statically and is much more efficient as a result. It&amp;#39;s a bit
under-documented and I&amp;#39;m not a huge fan of &lt;a href=&quot;https://github.com/Shopify/liquid&quot;&gt;Liquid&lt;/a&gt;
(the templating language Jekyll uses to process templates), but other than that I have no complaints.
I&amp;#39;d take Jekyll over Blogger any day.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;100% open-source.&lt;/strong&gt; The source code powering this blog can
be found on &lt;a href=&quot;https://github.com/alexjlockwood/alexjlockwood.github.io&quot;&gt;GitHub&lt;/a&gt;, and may be used
by others as the basis of their own blogging templates under the
&lt;a href=&quot;https://github.com/alexjlockwood/alexjlockwood.github.io/blob/master/README.md#license-and-copyright&quot;&gt;MIT license&lt;/a&gt;
(with the exception of the contents of the actual posts, of course :P).
Given that Android Design Patterns wouldn&amp;#39;t even exist without Android&amp;mdash;one of the largest open-source
projects in the world&amp;mdash;making this blog 100% open-source seemed fitting. Another cool implication of an entirely
open-source blog is that readers can propose corrections themselves by submitting pull requests
to GitHub.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Faster page load times.&lt;/strong&gt; Check out the &lt;a href=&quot;http://androiddesignpatterns.blogspot.com&quot;&gt;old version&lt;/a&gt; of this blog
and see for yourself! &lt;a href=&quot;https://developers.google.com/speed/pagespeed/&quot;&gt;Page Speed&lt;/a&gt; reports an increase from 65/100 to 89/100 for mobile
devices and 86/100 to 95/100 for desktop computers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Clean, responsive, and mobile-friendly.&lt;/strong&gt; First of all, I&amp;#39;d like to thank &lt;a href=&quot;https://plus.google.com/116871425473751000037&quot;&gt;+Shannon Lee&lt;/a&gt;
for coming up with most of the new design. I consider myself a beginner at web design, so this couldn&amp;#39;t have been done without her!
That said, I definitely recommend checking out the site on your phone or tablet, as it&amp;#39;s one of my favorite
aspects of the new design. Below is a comparison of the old vs. new versions of the site on a Nexus 7:&lt;/p&gt;

&lt;div style=&quot;max-width:600px;margin:0 auto;&quot;&gt;
&lt;div style=&quot;overflow:hidden;width:100%;display:block;&quot;&gt;
&lt;a href=&quot;/assets/images/posts/2014/01/08/adp-n7-screenshot-before.png&quot;&gt;
&lt;img style=&quot;display:block;float:left;max-width:300px;width:50%;position:relative;&quot; src=&quot;/assets/images/posts/2014/01/08/adp-n7-screenshot-before-resized.png&quot;/&gt;
&lt;a href=&quot;/assets/images/posts/2014/01/08/adp-n7-screenshot-after.png&quot;&gt;
&lt;img style=&quot;display:block;float:left;max-width:300px;width:50%;position:relative;&quot; src=&quot;/assets/images/posts/2014/01/08/adp-n7-screenshot-after-resized.png&quot;/&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Disqus comments.&lt;/strong&gt; Picking a third-party commenting platform to use was difficult, as there weren&amp;#39;t
many options to choose from. I ended up choosing &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt;, as it was one of the few commenting systems that I could find
that would correctly and reliably import my old comments from Blogger (spam detection is also a plus). One of the consequences of
the migration, however, is that all old threaded comments are now unthreaded, meaning that most of the old 
comments are a bit of a mess right now. I plan on manually cleaning up these at some point in
the future. Going forward, all new comments will thread normally.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let me know what you think of the new design in the comments below! Make sure to also leave any
suggestions, criticisms, or feature requests too. The design will continue to be refined over time until
it&amp;#39;s perfect. :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Fragment Transactions &amp; Activity State Loss</title>
   <link href="/2013/08/fragment-transaction-commit-state-loss.html"/>
   <id>/2013/08/fragment-transaction-commit-state-loss.html</id>
   <published>2013-08-20T00:00:00-04:00</published>
   <updated>2014-01-08T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;The following stack trace and exception message has plagued StackOverflow
ever since Honeycomb&amp;#39;s initial release:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
    at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)
    at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)
    at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)
    at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This post will explain &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt; this exception is thrown, and will
conclude with several suggestions that will help ensure it never crashes your
application again.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;The following stack trace and exception message has plagued StackOverflow
ever since Honeycomb&amp;#39;s initial release:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;java.lang.IllegalStateException: Can not perform this action after onSaveInstanceState
    at android.support.v4.app.FragmentManagerImpl.checkStateLoss(FragmentManager.java:1341)
    at android.support.v4.app.FragmentManagerImpl.enqueueAction(FragmentManager.java:1352)
    at android.support.v4.app.BackStackRecord.commitInternal(BackStackRecord.java:595)
    at android.support.v4.app.BackStackRecord.commit(BackStackRecord.java:574)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This post will explain &lt;em&gt;why&lt;/em&gt; and &lt;em&gt;when&lt;/em&gt; this exception is thrown, and will
conclude with several suggestions that will help ensure it never crashes your
application again.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Why was the exception thrown?&lt;/h3&gt;

&lt;p&gt;The exception was thrown because you attempted to commit a &lt;code&gt;FragmentTransaction&lt;/code&gt;
after the activity&amp;#39;s state had been saved, resulting in a phenomenon known as &lt;em&gt;Activity
state loss&lt;/em&gt;. Before we get into the details of what this actually means, however, let&amp;#39;s
first take a look at what happens under-the-hood when &lt;code&gt;onSaveInstanceState()&lt;/code&gt; is
called. As I discussed in my last post about
&lt;a href=&quot;/2013/08/binders-death-recipients.html&quot;&gt;Binders
&amp;amp; Death Recipients&lt;/a&gt;, Android applications have very little control over their destiny
within the Android runtime environment. The Android system has the power to terminate processes
at any time to free up memory, and background activities may be killed with little to no warning
as a result. To ensure that this sometimes erratic behavior remains hidden from the user, the
framework gives each Activity a chance to save its state by calling its &lt;code&gt;onSaveInstanceState()&lt;/code&gt;
method before making the Activity vulnerable to destruction. When the saved state is later
restored, the user will be given the perception that they are seamlessly switching between
foreground and background activities, regardless of whether or not the Activity had been
killed by the system.&lt;/p&gt;

&lt;p&gt;When the framework calls &lt;code&gt;onSaveInstanceState()&lt;/code&gt;, it passes the method a
&lt;code&gt;Bundle&lt;/code&gt; object for the Activity to use to save its state, and the Activity
records in it the state of its dialogs, fragments, and views. When the method returns,
the system parcels the &lt;code&gt;Bundle&lt;/code&gt; object across a Binder interface to the
System Server process, where it is safely stored away. When the system later decides
to recreate the Activity, it sends this same &lt;code&gt;Bundle&lt;/code&gt; object back to the
application, for it to use to restore the Activity&amp;#39;s old state.&lt;/p&gt;

&lt;p&gt;So why then is the exception thrown? Well, the problem stems from the fact that
these &lt;code&gt;Bundle&lt;/code&gt; objects represent a snapshot of an Activity at the moment
&lt;code&gt;onSaveInstanceState()&lt;/code&gt; was called, and nothing more. That means when you call
&lt;code&gt;FragmentTransaction#commit()&lt;/code&gt; after &lt;code&gt;onSaveInstanceState()&lt;/code&gt; is
called, the transaction won&amp;#39;t be remembered because it was never recorded as part of the
Activity&amp;#39;s state in the first place. From the user&amp;#39;s point of view, the transaction will
appear to be lost, resulting in accidental UI state loss. In order to protect the user
experience, Android avoids state loss at all costs, and simply throws an
&lt;code&gt;IllegalStateException&lt;/code&gt; whenever it occurs.&lt;/p&gt;

&lt;h3&gt;When is the exception thrown?&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;ve encountered this exception before, you&amp;#39;ve probably noticed that the moment
when it is thrown is slightly inconsistent across different platform versions. For
example, you probably found that older devices tended to throw the exception less
frequently, or that your application was more likely to crash when using the support
library than when using the official framework classes. These slight inconsistencies
have led many to assume that the support library is buggy and can&amp;#39;t be trusted.
These assumptions, however, are generally not true.&lt;/p&gt;

&lt;p&gt;The reason why these slight inconsistencies exist stems from a significant change to
the Activity lifecycle that was made in Honeycomb. Prior to Honeycomb, activities
were not considered killable until after they had been paused, meaning that
&lt;code&gt;onSaveInstanceState()&lt;/code&gt; was called immediately before &lt;code&gt;onPause()&lt;/code&gt;.
Beginning with Honeycomb, however, Activities are considered to be killable only
after they have been &lt;em&gt;stopped&lt;/em&gt;, meaning that &lt;code&gt;onSaveInstanceState()&lt;/code&gt;
will now be called before &lt;code&gt;onStop()&lt;/code&gt; instead of immediately before
&lt;code&gt;onPause()&lt;/code&gt;. These differences are summarized in the table below:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;pre-Honeycomb&lt;/th&gt;
&lt;th&gt;post-Honeycomb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Activities can be killed before &lt;code&gt;onPause()&lt;/code&gt;?&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Activities can be killed before &lt;code&gt;onStop()&lt;/code&gt;?&lt;/td&gt;
&lt;td&gt;YES&lt;/td&gt;
&lt;td&gt;NO&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;onSaveInstanceState(Bundle)&lt;/code&gt; is guaranteed to be called before...&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onPause()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;onStop()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;As a result of the slight changes that were made to the Activity lifecycle, the support
library sometimes needs to alter its behavior depending on the platform version. For
example, on Honeycomb devices and above, an exception will be thrown each and every
time a &lt;code&gt;commit()&lt;/code&gt; is called after &lt;code&gt;onSaveInstanceState()&lt;/code&gt;
to warn the developer that state loss has occurred. However, throwing an exception
every time this happened would be too restrictive on pre-Honeycomb devices, which
have their &lt;code&gt;onSaveInstanceState()&lt;/code&gt; method called much earlier in the
Activity lifecycle and are more vulnerable to accidental state loss as a result.
The Android team was forced to make a compromise: for better inter-operation with
older versions of the platform, older devices would have to live with the accidental
state loss that might result between &lt;code&gt;onPause()&lt;/code&gt; and &lt;code&gt;onStop()&lt;/code&gt;.
The support library&amp;#39;s behavior across the two platforms is summarized in the table below:&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;pre-Honeycomb&lt;/th&gt;
&lt;th&gt;post-Honeycomb&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;commit()&lt;/code&gt; before &lt;code&gt;onPause()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;commit()&lt;/code&gt; between &lt;code&gt;onPause()&lt;/code&gt; and &lt;code&gt;onStop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;STATE LOSS&lt;/td&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;commit()&lt;/code&gt; after &lt;code&gt;onStop()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;EXCEPTION&lt;/td&gt;
&lt;td&gt;EXCEPTION&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h3&gt;How to avoid the exception?&lt;/h3&gt;

&lt;p&gt;Avoiding Activity state loss becomes a whole lot easier once you understand what is actually
going on. If you&amp;#39;ve made it this far in the post, hopefully you understand a little better
how the support library works and why it is so important to avoid state loss in your applications.
In case you&amp;#39;ve referred to this post in search of a quick fix, however, here are some suggestions
to keep in the back of your mind as you work with &lt;code&gt;FragmentTransaction&lt;/code&gt;s in your applications:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be careful when committing transactions inside Activity lifecycle methods.&lt;/strong&gt; 
A large majority of applications will only ever commit transactions the very first
time &lt;code&gt;onCreate()&lt;/code&gt; is called and/or in response to user input, and will
never face any problems as a result. However, as your transactions begin to venture
out into the other Activity lifecycle methods, such as &lt;code&gt;onActivityResult()&lt;/code&gt;,
&lt;code&gt;onStart()&lt;/code&gt;, and &lt;code&gt;onResume()&lt;/code&gt;, things can get a little tricky.
For example, you should not commit transactions inside the &lt;code&gt;FragmentActivity#onResume()&lt;/code&gt;
method, as there are some cases in which the method can be called before the
activity&amp;#39;s state has been restored (see the
&lt;a href=&quot;http://developer.android.com/reference/android/support/v4/app/FragmentActivity.html#onResume()&quot;&gt;documentation&lt;/a&gt;
for more information). If your application requires committing a transaction in
an Activity lifecycle method other than &lt;code&gt;onCreate()&lt;/code&gt;, do it in either
&lt;code&gt;FragmentActivity#onResumeFragments()&lt;/code&gt; or &lt;code&gt;Activity#onPostResume()&lt;/code&gt;.
These two methods are guaranteed to be called after the Activity has been restored to its
original state, and therefore avoid the possibility of state loss all together.
(As an example of how this can be done, check out my answer to
&lt;a href=&quot;http://stackoverflow.com/q/16265733/844882&quot;&gt;this StackOverflow question&lt;/a&gt; for
some ideas on how to commit &lt;code&gt;FragmentTransaction&lt;/code&gt;s in response to calls
made to the &lt;code&gt;Activity#onActivityResult()&lt;/code&gt; method).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Avoid performing transactions inside asynchronous callback methods.&lt;/strong&gt; This
includes commonly used methods such as &lt;code&gt;AsyncTask#onPostExecute()&lt;/code&gt; and
&lt;code&gt;LoaderManager.LoaderCallbacks#onLoadFinished()&lt;/code&gt;. The problem with
performing transactions in these methods is that they have no knowledge of the
current state of the Activity lifecycle when they are called. For example,
consider the following sequence of events:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;An activity executes an &lt;code&gt;AsyncTask&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;The user presses the &amp;quot;Home&amp;quot; key, causing the activity&amp;#39;s &lt;code&gt;onSaveInstanceState()&lt;/code&gt;
 and &lt;code&gt;onStop()&lt;/code&gt; methods to be called.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;AsyncTask&lt;/code&gt; completes and &lt;code&gt;onPostExecute()&lt;/code&gt; is called, unaware that the
 Activity has since been stopped.&lt;/li&gt;
&lt;li&gt;A &lt;code&gt;FragmentTransaction&lt;/code&gt; is committed inside the &lt;code&gt;onPostExecute()&lt;/code&gt; method, causing
 an exception to be thrown.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In general, the best way to avoid the exception in these cases is to simply avoid
committing transactions in asynchronous callback methods all together. Google
engineers seem to agree with this belief as well. According to
&lt;a href=&quot;https://groups.google.com/d/msg/android-developers/dXZZjhRjkMk/QybqCW5ukDwJ&quot;&gt;this post&lt;/a&gt;
on the Android Developers group, the Android team considers the major shifts in UI
that can result from committing &lt;code&gt;FragmentTransaction&lt;/code&gt;s from within
asynchronous callback methods to be bad for the user experience. If your application
requires performing the transaction inside these callback methods and there is no
easy way to guarantee that the callback won&amp;#39;t be invoked after &lt;code&gt;onSaveInstanceState()&lt;/code&gt;,
you may have to resort to using &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; and
dealing with the state loss that might occur. (See also these two StackOverflow
posts for additional hints, &lt;a href=&quot;http://stackoverflow.com/q/8040280/844882&quot;&gt;here&lt;/a&gt;
and &lt;a href=&quot;http://stackoverflow.com/q/7992496/844882&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Use &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; only as a last resort.&lt;/strong&gt; The only
difference between calling &lt;code&gt;commit()&lt;/code&gt; and &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt;
is that the latter will not throw an exception if state loss occurs. Usually you don&amp;#39;t
want to use this method because it implies that there is a possibility that state loss
could happen. The better solution, of course, is to write your application so that
&lt;code&gt;commit()&lt;/code&gt; is guaranteed to be called before the activity&amp;#39;s state has been
saved, as this will result in a better user experience. Unless the possibility of
state loss can&amp;#39;t be avoided, &lt;code&gt;commitAllowingStateLoss()&lt;/code&gt; should not be used.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hopefully these tips will help you resolve any issues you have had with this exception
in the past. If you are still having trouble, post a question on
&lt;a href=&quot;http://stackoverflow.com&quot;&gt;StackOverflow&lt;/a&gt; and post a link in a comment below
and I can take a look. :)&lt;/p&gt;

&lt;p&gt;As always, thanks for reading, and leave a comment if you have any questions.
Don&amp;#39;t forget to +1 this blog and share this post on Google+ if you found it interesting!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Binders &amp; Death Recipients</title>
   <link href="/2013/08/binders-death-recipients.html"/>
   <id>/2013/08/binders-death-recipients.html</id>
   <published>2013-08-05T00:00:00-04:00</published>
   <updated>2013-08-05T00:00:00-04:00</updated>
   <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note: before you begin, make sure you&amp;#39;ve read my &lt;a href=&quot;/2013/07/binders-window-tokens.html&quot;&gt;previous post&lt;/a&gt;
about Binder tokens!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the very beginning, Android&amp;#39;s central focus has been the ability to multitask. In order to achieve it,
Android takes a unique approach by allowing multiple applications to run at the same time. Applications are
never explicitly closed by the user, but are instead left running at a low priority to be killed by the system
when memory is low. This ability to keep processes waiting in the background speeds up app-switching later
down the line.&lt;/p&gt;

&lt;p&gt;Developers learn early on that the key to how Android handles applications in this way is that &lt;strong&gt;processes
aren&amp;#39;t shut down cleanly&lt;/strong&gt;. Android doesn&amp;#39;t rely on applications being well-written and responsive to
polite requests to exit. Rather, it brutally force-kills them without warning, allowing the kernel to
immediately reclaim resources associated with the process. This helps prevent serious out of memory situations
and gives Android total control over misbehaving apps that are negatively impacting the system. For this reason,
there is no guarantee that any user-space code (such as an Activity&amp;#39;s &lt;code&gt;onDestroy()&lt;/code&gt; method) will
ever be executed when an application&amp;#39;s process goes away.&lt;/p&gt;
</summary>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: before you begin, make sure you&amp;#39;ve read my &lt;a href=&quot;/2013/07/binders-window-tokens.html&quot;&gt;previous post&lt;/a&gt;
about Binder tokens!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Since the very beginning, Android&amp;#39;s central focus has been the ability to multitask. In order to achieve it,
Android takes a unique approach by allowing multiple applications to run at the same time. Applications are
never explicitly closed by the user, but are instead left running at a low priority to be killed by the system
when memory is low. This ability to keep processes waiting in the background speeds up app-switching later
down the line.&lt;/p&gt;

&lt;p&gt;Developers learn early on that the key to how Android handles applications in this way is that &lt;strong&gt;processes
aren&amp;#39;t shut down cleanly&lt;/strong&gt;. Android doesn&amp;#39;t rely on applications being well-written and responsive to
polite requests to exit. Rather, it brutally force-kills them without warning, allowing the kernel to
immediately reclaim resources associated with the process. This helps prevent serious out of memory situations
and gives Android total control over misbehaving apps that are negatively impacting the system. For this reason,
there is no guarantee that any user-space code (such as an Activity&amp;#39;s &lt;code&gt;onDestroy()&lt;/code&gt; method) will
ever be executed when an application&amp;#39;s process goes away.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Considering the limited memory available in mobile environments, this approach seems promising. However, there
is still one issue that needs to be addressed: &lt;em&gt;how should the system detect an application&amp;#39;s death so that
it can quickly clean up its state&lt;/em&gt;? When an application dies, its state will be spread over dozens of system
services (the Activity Manager, Window Manager, Power Manager, etc.) and several different processes. These
system services need to be notified immediately when an application dies so that they can clean up its state
and maintain an accurate snapshot of the system. Enter death recipients.&lt;/p&gt;

&lt;h3&gt;Death Recipients&lt;/h3&gt;

&lt;p&gt;As it turns out, this task is made easy using the &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s &amp;quot;link-to-death&amp;quot; facility, which allows a process to get a callback when another process hosting a binder object goes away. In Android, any process can receive a notification when another process dies by taking the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;First, the process creates a &lt;a href=&quot;http://developer.android.com/reference/android/os/IBinder.DeathRecipient.html&quot;&gt;&lt;code&gt;DeathRecipient&lt;/code&gt;&lt;/a&gt; 
 callback object containing the code to be executed when the death notification arrives.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, it obtains a reference to a &lt;code&gt;Binder&lt;/code&gt; object that lives in another process and calls its 
 &lt;a href=&quot;http://developer.android.com/reference/android/os/Binder.html#linkToDeath(android.os.IBinder.DeathRecipient, int)&quot;&gt;&lt;code&gt;linkToDeath(IBinder.DeathRecipient recipient, int flags)&lt;/code&gt;&lt;/a&gt;,
 passing the &lt;code&gt;DeathRecipient&lt;/code&gt; callback object as the first argument.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, it waits for the process hosting the &lt;code&gt;Binder&lt;/code&gt; object to die. When the Binder kernel
 driver detects that the process hosting the &lt;code&gt;Binder&lt;/code&gt; is gone, it will notify the registered
 &lt;code&gt;DeathRecipient&lt;/code&gt; callback object by calling its 
 &lt;a href=&quot;http://developer.android.com/reference/android/os/IBinder.DeathRecipient.html#binderDied()&quot;&gt;&lt;code&gt;binderDied()&lt;/code&gt;&lt;/a&gt;
 method.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Analyzing the source code once again gives some insight into how this pattern is used inside the framework.
Consider an example application that (similar to the example given in my &lt;a href=&quot;/2013/07/binders-window-tokens.html&quot;&gt;previous post&lt;/a&gt;)
acquires a wake lock in &lt;code&gt;onCreate()&lt;/code&gt;, but is abruptly killed by the system before it is
able to release the wake lock in &lt;code&gt;onDestroy()&lt;/code&gt;. How and when will the
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/android-4.3_r2.1/services/java/com/android/server/power/PowerManagerService.java&quot;&gt;&lt;code&gt;PowerManagerService&lt;/code&gt;&lt;/a&gt;
be notified so that it can quickly release the wake lock before wasting the device&amp;#39;s battery? As you might
expect, the &lt;code&gt;PowerManagerService&lt;/code&gt; achieves this by registering a &lt;code&gt;DeathRecipient&lt;/code&gt;
(note that some of the source code has been cleaned up for the sake of brevity):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * The global power manager system service. Application processes &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * interact with this class remotely through the PowerManager class.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @see frameworks/base/services/java/com/android/server/power/PowerManagerService.java&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PowerManagerService&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Stub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// List of all wake locks acquired by applications.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Binder call&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquireWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Register to receive a notification when the process hosting &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the token goes away.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;linkToDeath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Acquire the wake lock by adding it as an entry to the list.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;updatePowerState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Binder call&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;releaseWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findWakeLockIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// The client app has sent us an invalid token, so ignore&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// the request.&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Release the wake lock by removing its entry from the list.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// We no longer care about receiving death notifications.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unlinkToDeath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;updatePowerState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findWakeLockIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Represents a wake lock that has been acquired by an application.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DeathRecipient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inf&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;binderDied&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// The token&amp;#39;s hosting process was killed before it was&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// able to explicitly release the wake lock, so release &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// it for them.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mWakeLocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;updatePowerState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Updates the global power state of the device.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updatePowerState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code might seem a little dense at first, but the concept is simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When the application requests to acquire a wake lock, the power manager service&amp;#39;s
&lt;code&gt;acquireWakeLock()&lt;/code&gt; method is called. The power manager service registers
the wake lock for the application, and also links to the death of the wake lock&amp;#39;s
unique &lt;code&gt;Binder&lt;/code&gt; token so that it can get notified if the application process
is abruptly killed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the application requests to release a wake lock, the power manager service&amp;#39;s
&lt;code&gt;releaseWakeLock()&lt;/code&gt; method is called. The power manager service releases
the wake lock for the application, and also unlinks to the death of the wake lock&amp;#39;s
unique &lt;code&gt;Binder&lt;/code&gt; token (as it no longer cares about getting notified when
the application process dies).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the application is abruptly killed before the wake lock is explicitly released,
the Binder kernel driver notices that the wake lock&amp;#39;s Binder token has been linked
to the death of the application process. The Binder kernel driver quickly dispatches
a death notification to the registered death recipient&amp;#39;s &lt;code&gt;binderDied()&lt;/code&gt;
method, which quickly releases the wake lock and updates the device&amp;#39;s power state.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Examples in the Framework&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s link-to-death feature is an incredibly useful tool that is 
used extensively by the framework&amp;#39;s system services. Here are some of the more 
interesting examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The window manager links to the death of the window&amp;#39;s 
&lt;a href=&quot;https://developer.android.com/reference/android/view/Window.Callback.html&quot;&gt;callback interface&lt;/a&gt;.
In the rare case that the application&amp;#39;s process is killed while its windows are still showing, 
the window manager will receive a death notification callback, at which point it can clean up after
the application by closing its windows.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When an application binds to a remote service, the application links to the death of the binder
stub returned by the remote service&amp;#39;s &lt;code&gt;onBind()&lt;/code&gt; method. If the remote service suddenly
dies, the registered death recipient&amp;#39;s &lt;code&gt;binderDied()&lt;/code&gt; method is called, which contains
some clean up code, as well as the code that calls the
&lt;a href=&quot;https://developer.android.com/reference/android/content/ServiceConnection.html#onServiceDisconnected(android.content.ComponentName)&quot;&gt;&lt;code&gt;onServiceDisconnected(ComponentName)&lt;/code&gt;&lt;/a&gt;
method (the source code illustrating how this is done is located
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/core/java/android/app/LoadedApk.java&quot;&gt;here&lt;/a&gt;).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Many other system services depend on the Binder&amp;#39;s link-to-death facility in order to ensure that
expensive resources aren&amp;#39;t leaked when an application process is forcefully killed. Some other examples
(not including the &lt;code&gt;PowerManagerService&lt;/code&gt;) are the
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/services/java/com/android/server/VibratorService.java&quot;&gt;&lt;code&gt;VibratorService&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/services/java/com/android/server/LocationManagerService.java&quot;&gt;&lt;code&gt;LocationManagerService&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/services/java/com/android/server/location/GpsLocationProvider.java&quot;&gt;&lt;code&gt;GpsLocationProvider&lt;/code&gt;&lt;/a&gt;,
and the &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/master/services/java/com/android/server/wifi/WifiService.java&quot;&gt;&lt;code&gt;WifiService&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Additional Reading&lt;/h3&gt;

&lt;p&gt;If you would like to learn more about &lt;code&gt;Binder&lt;/code&gt;s and how they work at a deeper level, I&amp;#39;ve included
some links below. These articles were extremely helpful to me as I was writing these last two posts about
&lt;code&gt;Binder&lt;/code&gt; tokens and &lt;code&gt;DeathRecipient&lt;/code&gt;s, and I would strongly recommend reading them
if you get a chance!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lkml.org/lkml/2009/6/25/3&quot;&gt;This post&lt;/a&gt; is what initially got me interested in this
topic. Special thanks to &lt;a class=&quot;g-profile&quot; href=&quot;http://plus.google.com/105051985738280261832&quot; target=&quot;_blank&quot;&gt;+Dianne Hackborn&lt;/a&gt;
for explaining this!&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.nds.rub.de/media/attachments/files/2012/03/binder.pdf&quot;&gt;A great paper&lt;/a&gt; which
explains almost everything you need to know about Binders.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://events.linuxfoundation.org/images/stories/slides/abs2013_gargentas.pdf&quot;&gt;These slides&lt;/a&gt; are
another great Binder resource.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/105051985738280261832/posts/ACaCokiLfqK&quot;&gt;This Google+ post&lt;/a&gt; talks about
how/why live wallpapers are given their own window.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2010/04/multitasking-android-way.html&quot;&gt;A great blog post&lt;/a&gt;
discussing multitasking in Android.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://plus.google.com/105051985738280261832/posts/XAZ4CeVP6DC&quot;&gt;This Google+ post&lt;/a&gt; talks about
how windows are crucial in achieving secure and efficient graphics performance.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920021094.do&quot;&gt;This book&lt;/a&gt; taught me a lot about how the
application framework works from an embedded systems point of view... and it taught me a couple of really cool
&lt;code&gt;adb&lt;/code&gt; commands too!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As always, thanks for reading, and leave a comment if you have any questions. Don&amp;#39;t forget to +1
this blog and share this post on Google+ if you found it interesting!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Binders &amp; Window Tokens</title>
   <link href="/2013/07/binders-window-tokens.html"/>
   <id>/2013/07/binders-window-tokens.html</id>
   <published>2013-07-31T00:00:00-04:00</published>
   <updated>2013-07-31T00:00:00-04:00</updated>
   <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note: if you liked this post, be sure to read my second blog post about
&lt;a href=&quot;/2013/08/binders-death-recipients.html&quot;&gt;Binders &amp;amp; Death Recipients&lt;/a&gt;
as well!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of Android&amp;#39;s key design goals was to provide an open platform that doesn&amp;#39;t rely on a
central authority to verify that applications do what they claim. To achieve this, Android
uses application sandboxes and Linux process isolation to prevent applications from being
able to access the system or other applications in ways that are not controlled and secure.
This architecture was chosen with both developers and device users in mind: neither should
have to take extra steps to protect the device from malicious applications. Everything
should be taken care of automatically by the system.&lt;/p&gt;

&lt;p&gt;For a long time I took this security for granted, not completely understanding how it was
actually enforced. But recently I became curious. What mechanism prevents me from, for
example, tricking the system into releasing a wake lock acquired by another application,
or from hiding another application&amp;#39;s windows from the screen? More generally, how do
Android&amp;#39;s core system services respond to requests made by third-party applications
in a way that is both efficient and secure?&lt;/p&gt;
</summary>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: if you liked this post, be sure to read my second blog post about
&lt;a href=&quot;/2013/08/binders-death-recipients.html&quot;&gt;Binders &amp;amp; Death Recipients&lt;/a&gt;
as well!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of Android&amp;#39;s key design goals was to provide an open platform that doesn&amp;#39;t rely on a
central authority to verify that applications do what they claim. To achieve this, Android
uses application sandboxes and Linux process isolation to prevent applications from being
able to access the system or other applications in ways that are not controlled and secure.
This architecture was chosen with both developers and device users in mind: neither should
have to take extra steps to protect the device from malicious applications. Everything
should be taken care of automatically by the system.&lt;/p&gt;

&lt;p&gt;For a long time I took this security for granted, not completely understanding how it was
actually enforced. But recently I became curious. What mechanism prevents me from, for
example, tricking the system into releasing a wake lock acquired by another application,
or from hiding another application&amp;#39;s windows from the screen? More generally, how do
Android&amp;#39;s core system services respond to requests made by third-party applications
in a way that is both efficient and secure?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;To my surprise, the answer to nearly all of my questions was pretty simple: &lt;em&gt;the Binder&lt;/em&gt;.
Binders are the cornerstone of Android&amp;#39;s architecture; they abstract the low-level details
of IPC from the developer, allowing applications to easily talk to both the System Server
and others&amp;#39; remote service components. But Binders also have a number of other cool features
that are used extensively throughout the system in a mix of clever ways, making it much
easier for the framework to address security issues. This blog post will cover one of
these features in detail, known as &lt;em&gt;Binder tokens&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Binder Tokens&lt;/h3&gt;

&lt;p&gt;An interesting property of &lt;code&gt;Binder&lt;/code&gt; objects is that each instance maintains &lt;strong&gt;a unique
identity across all processes in the system&lt;/strong&gt;, no matter how many process boundaries
it crosses or where it goes. This facility is provided by the Binder kernel driver, which
analyzes the contents of each Binder transaction and assigns a unique 32-bit integer
value to each &lt;code&gt;Binder&lt;/code&gt; object it sees. To ensure that Java&amp;#39;s &lt;code&gt;==&lt;/code&gt; operator adheres to
the Binder&amp;#39;s unique, cross-process object identity contract, a &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s object reference
is treated a little differently than those of other objects. Specifically, each &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s
object reference is assigned either,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A &lt;em&gt;virtual memory address&lt;/em&gt; pointing to a &lt;code&gt;Binder&lt;/code&gt; object in the &lt;em&gt;same&lt;/em&gt; process, or&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;unique 32-bit handle&lt;/em&gt; (as assigned by the Binder kernel driver) pointing to the
 &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s virtual memory address in a &lt;em&gt;different&lt;/em&gt; process.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Binder kernel driver maintains a mapping of local addresses to remote Binder handles
(and vice versa) for each &lt;code&gt;Binder&lt;/code&gt; it sees, and assigns each &lt;code&gt;Binder&lt;/code&gt;&amp;#39;s object reference
its appropriate value to ensure that equality will behave as expected even in remote
processes.&lt;/p&gt;

&lt;p&gt;The Binder&amp;#39;s unique object identity rules allow them to be used for a special purpose: as
&lt;em&gt;shared, security access tokens&lt;/em&gt;.&lt;sup&gt;&lt;a href=&quot;#footnote1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; Binders are globally
unique, which means if you create one, nobody else can create one that appears equal to it.
For this reason, the application framework uses Binder tokens extensively in order to ensure
secure interaction between cooperating processes: a client can create a &lt;code&gt;Binder&lt;/code&gt; object to
use as a token that can be shared with a server process, and the server can use it to validate
the client&amp;#39;s requests without there being anyway for others to spoof it.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s see how this works through a simple example. Consider an application which makes a
request to the &lt;code&gt;PowerManager&lt;/code&gt; to acquire (and later release) a wake lock:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * An example activity that acquires a wake lock in onCreate() &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * and releases it in onDestroy().&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;POWER_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PowerManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PARTIAL_WAKE_LOCK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;My Tag&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;wakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inspecting the &lt;code&gt;PowerManager&lt;/code&gt;
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/android-4.3_r2.1/core/java/android/os/PowerManager.java&quot;&gt;source code&lt;/a&gt;
helps us understand what&amp;#39;s happening under the hood (note that some of the source code has been
cleaned-up for the sake of brevity):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * The interface that applications use to talk to the global power manager&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * system service.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @see frameworks/base/core/java/android/os/PowerManager.java&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PowerManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Our handle on the global power manager service.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPowerManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;levelAndFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;levelAndFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WakeLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IBinder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;WakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Create a token that uniquely identifies this wake lock.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Binder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mFlags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mTag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Send the power manager service a request to acquire a wake&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// lock for the application. Include the token as part of the &lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// request so that the power manager service can validate the&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// application&amp;#39;s identity when it requests to release the wake&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// lock later on.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;acquireWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Send the power manager service a request to release the&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// wake lock associated with &amp;#39;mToken&amp;#39;.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;releaseWakeLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what&amp;#39;s going on? Let&amp;#39;s walk through the code step-by-step:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;The client application requests an instance of the &lt;code&gt;PowerManager&lt;/code&gt; class in &lt;code&gt;onCreate()&lt;/code&gt;.
 The &lt;code&gt;PowerManager&lt;/code&gt; class provides an interface for the client application to talk to the global
 &lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/android-4.3_r2.1/services/java/com/android/server/power/PowerManagerService.java&quot;&gt;&lt;code&gt;PowerManagerService&lt;/code&gt;&lt;/a&gt;,
 which runs in the System Server process and is in charge of managing the device&amp;#39;s power
 state (i.e. determining the screen&amp;#39;s brightness, starting Daydreams, detecting when the
 device is plugged into a dock, etc.).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The client application creates and acquires a wake lock in &lt;code&gt;onCreate()&lt;/code&gt;. The &lt;code&gt;PowerManager&lt;/code&gt;
 sends the &lt;code&gt;WakeLock&lt;/code&gt;&amp;#39;s unique &lt;code&gt;Binder&lt;/code&gt; token as part of the &lt;code&gt;acquire()&lt;/code&gt; request. When the
 &lt;code&gt;PowerManagerService&lt;/code&gt; receives the request, it holds onto the token for safe-keeping and
 forces the device to remain awake, until...&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The client application releases the wake lock in &lt;code&gt;onDestroy()&lt;/code&gt;. The &lt;code&gt;PowerManager&lt;/code&gt; sends
 the &lt;code&gt;WakeLock&lt;/code&gt;&amp;#39;s unique &lt;code&gt;Binder&lt;/code&gt; token as part of the request. When the &lt;code&gt;PowerManagerService&lt;/code&gt;
 receives the request, it compares the token against all other &lt;code&gt;WakeLock&lt;/code&gt; tokens it has stored,
 and only releases the &lt;code&gt;WakeLock&lt;/code&gt; if it finds a match. This additional &amp;quot;validation step&amp;quot; is an
 important security measure put in place to guarantee that other applications cannot trick the
 &lt;code&gt;PowerManagerService&lt;/code&gt; into releasing a &lt;code&gt;WakeLock&lt;/code&gt; held by a different application.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Because of their unique object-identity capabilities, Binder tokens are used
extensively&lt;sup&gt;&lt;a href=&quot;#footnote2&quot; id=&quot;ref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; in the system for security. Perhaps the most
interesting example of how they are used in the framework is the &amp;quot;window token,&amp;quot; which we will now
discuss below.&lt;/p&gt;

&lt;h3&gt;Window Tokens&lt;/h3&gt;

&lt;p&gt;If you&amp;#39;ve ever scrolled through the official documentation for Android&amp;#39;s &lt;code&gt;View&lt;/code&gt; class, chances
are you&amp;#39;ve stumbled across the
&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#getWindowToken()&quot;&gt;&lt;code&gt;getWindowToken()&lt;/code&gt;&lt;/a&gt;
method and wondered what it meant. As its name implies, a window token is a special type of
Binder token that the window manager uses to uniquely identify a window in the system. Window
tokens are important for security because they make it impossible for malicious applications
to draw on top of the windows of other applications. The window manager protects against this
by requiring applications to pass their application&amp;#39;s window token as part of each request to
add or remove a window.&lt;sup&gt;&lt;a href=&quot;#footnote3&quot; id=&quot;ref3&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; If the tokens don&amp;#39;t match, the
window manager rejects the request and throws a
&lt;a href=&quot;http://developer.android.com/reference/android/view/WindowManager.BadTokenException.html&quot;&gt;&lt;code&gt;BadTokenException&lt;/code&gt;&lt;/a&gt;.
Without window tokens, this necessary identification step wouldn&amp;#39;t be possible and the window
manager wouldn&amp;#39;t be able to protect itself from malicious applications.&lt;/p&gt;

&lt;p&gt;By this point you might be wondering about the real-world scenarios in which you would need to
obtain a window token. Here are some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;When an application starts up for the first time, the &lt;code&gt;ActivityManagerService&lt;/code&gt;&lt;sup&gt;&lt;a href=&quot;#footnote4&quot; id=&quot;ref4&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;
creates a special kind of window token called an &lt;strong&gt;application window token&lt;/strong&gt;, which uniquely identifies the application&amp;#39;s
top-level container window.&lt;sup&gt;&lt;a href=&quot;#footnote5&quot; id=&quot;ref5&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; The activity manager gives this token to both the
application and the window manager, and the application sends the token to the window manager each time it wants to
add a new window to the screen. This ensures secure interaction between the application and the window manager
(by making it impossible to add windows on top of other applications), and also makes it easy for the activity
manager to make direct requests to the window manager. For example, the activity manager can say, &amp;quot;hide all of
this token&amp;#39;s windows&amp;quot;, and the window manager will be able to correctly identify the set of windows which should be closed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Developers implementing their own custom Launchers can interact with the live wallpaper window that sits directly behind them by calling the 
&lt;a href=&quot;https://developer.android.com/reference/android/app/WallpaperManager.html#sendWallpaperCommand(android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)&quot;&gt;&lt;code&gt;sendWallpaperCommand(IBinder windowToken, String action, int x, int y, int z, Bundle extras)&lt;/code&gt;&lt;/a&gt;
method. To ensure that no other application other than the Launcher is able to interact with the live wallpaper, the
framework requires developers to pass a window token as the first argument to the method. If the window token does not
identify the current foreground activity window sitting on top of the wallpaper, the command is ignored and a warning is logged.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applications can ask the
&lt;a href=&quot;http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html&quot;&gt;&lt;code&gt;InputMethodManager&lt;/code&gt;&lt;/a&gt;
to hide the soft keyboard by calling the
&lt;a href=&quot;http://developer.android.com/reference/android/view/inputmethod/InputMethodManager.html#hideSoftInputFromWindow(android.os.IBinder, int)&quot;&gt;&lt;code&gt;hideSoftInputFromWindow(IBinder windowToken, int flags)&lt;/code&gt;&lt;/a&gt;
method, but must provide a window token as part of the request. If the token doesn&amp;#39;t match the window token belonging to the
window currently accepting input, the &lt;code&gt;InputMethodManager&lt;/code&gt; will reject the request. This makes it impossible for malicious
applications to force-close a soft keyboard opened by another application.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Applications which manually add new windows to the screen (i.e. using the
&lt;a href=&quot;https://developer.android.com/reference/android/view/WindowManager.html&quot;&gt;&lt;code&gt;addView(View, WindowManager.LayoutParams)&lt;/code&gt;&lt;/a&gt;
method) may need to specify their application&amp;#39;s window token by setting the
&lt;a href=&quot;http://developer.android.com/reference/android/view/WindowManager.LayoutParams.html#token&quot;&gt;&lt;code&gt;WindowManager.LayoutParams.token&lt;/code&gt;&lt;/a&gt;
field. It is very unlikely that any normal application would ever have to do this, since the
&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#getWindowManager()&quot;&gt;&lt;code&gt;getWindowManager()&lt;/code&gt;&lt;/a&gt;
method returns a &lt;code&gt;WindowManager&lt;/code&gt; which will automatically set the token&amp;#39;s value for you. That said, if at some point
in the future you encounter a situation in which you need to add a panel window to the screen from a background
service, know that you would need to manually sign the request with your application window token in order to achieve it. :P&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Though their existence is for the most part hidden from developers, Binder tokens are used
extensively in the system for security. Android is a massively distributed system of cooperating
processes reliant on the fact that Binder objects are unique across all processes on the device.
Binder tokens are the driving force behind interaction in the framework, and without them secure
communication between application processes and the system would be difficult to achieve.&lt;/p&gt;

&lt;p&gt;As always, thanks for reading, and leave a comment if you have any questions. Don&amp;#39;t forget to +1
this blog in the top right corner!&lt;/p&gt;

&lt;hr class=&quot;footnote-divider&quot; /&gt;

&lt;p&gt;&lt;sup id=&quot;footnote1&quot;&gt;1&lt;/sup&gt; The
&lt;a href=&quot;http://developer.android.com/reference/android/os/Binder.html&quot;&gt;documentation&lt;/a&gt; actually
hints that &lt;code&gt;Binder&lt;/code&gt;s can be used for this purpose: &amp;quot;You can... simply instantiate a raw Binder
object directly to use as a token that can be shared across processes.&amp;quot; &lt;a href=&quot;#ref1&quot; title=&quot;Jump to footnote 1.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;footnote2&quot;&gt;2&lt;/sup&gt; Pick a random file in
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/services/java/com/android/server&quot;&gt;&lt;code&gt;frameworks/base/services/java/com/android/server&lt;/code&gt;&lt;/a&gt;
and chances are it makes use of Binder tokens in some shape or form. Another cool example involves
the status bar, notification manager, and the system UI. Specifically, the
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/services/java/com/android/server/StatusBarManagerService.java&quot;&gt;&lt;code&gt;StatusBarManagerService&lt;/code&gt;&lt;/a&gt;
maintains a global mapping of Binder tokens to notifications. When the
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/services/java/com/android/server/NotificationManagerService.java&quot;&gt;&lt;code&gt;NotificationManagerService&lt;/code&gt;&lt;/a&gt;
makes a request to the status bar manager to add a notification to the status bar, the status bar
manager creates a binder token uniquely identifying the notification and passes it to both the
notification manager and the
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/packages/SystemUI/&quot;&gt;&lt;code&gt;SystemUI&lt;/code&gt;&lt;/a&gt;.
Since all three parties know the notification&amp;#39;s Binder token, any changes to the notification from
that point forward (i.e. the notification manager cancels the notification, or the SystemUI detects
that the user has swiped a notification off screen) will go through the status bar manager first.
This makes it easier for the three system services to stay in sync: the status bar manager can be
in charge of centralizing all of the information about which notifications should currently be shown
without the SystemUI and notification manager ever having to interact with each other directly. &lt;a href=&quot;#ref2&quot; title=&quot;Jump to footnote 2.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;footnote3&quot;&gt;3&lt;/sup&gt; Applications that hold the &lt;code&gt;android.permission.SYSTEM_ALERT_WINDOW&lt;/code&gt;
permission (a.k.a. the &amp;quot;draw over other apps&amp;quot; permission) are notable exceptions to this rule.
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.facebook.orca&quot;&gt;Facebook Messenger&lt;/a&gt;
and &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.inisoft.mediaplayer.a&quot;&gt;DicePlayer&lt;/a&gt;
are two popular applications which require this permission, and use it to add windows on top of
other applications from a background service. &lt;a href=&quot;#ref3&quot; title=&quot;Jump to footnote 3.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;footnote4&quot;&gt;4&lt;/sup&gt; The
&lt;a href=&quot;https://android.googlesource.com/platform/frameworks/base/+/refs/heads/master/services/java/com/android/server/am/ActivityManagerService.java&quot;&gt;&lt;code&gt;ActivityManagerService&lt;/code&gt;&lt;/a&gt;
is the global system service (running in the System Server process) that is in charge of starting
(and managing) new components, such as Activities and Services. It&amp;#39;s also involved in the maintenance
of OOM adjustments used by the in-kernel low-memory handler, permissions, task management, etc. &lt;a href=&quot;#ref4&quot; title=&quot;Jump to footnote 4.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;footnote5&quot;&gt;5&lt;/sup&gt; You can obtain a reference by calling
&lt;a href=&quot;http://developer.android.com/reference/android/view/View.html#getApplicationWindowToken()&quot;&gt;&lt;code&gt;getApplicationWindowToken()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#ref5&quot; title=&quot;Jump to footnote 5.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Handling Configuration Changes with Fragments</title>
   <link href="/2013/04/retaining-objects-across-config-changes.html"/>
   <id>/2013/04/retaining-objects-across-config-changes.html</id>
   <published>2013-04-29T00:00:00-04:00</published>
   <updated>2014-01-14T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;This post addresses a common question that is frequently asked on &lt;a href=&quot;http://stackoverflow.com/q/3821423/844882&quot;&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the best way to retain active objects&amp;mdash;such as
running &lt;code&gt;Thread&lt;/code&gt;s, &lt;code&gt;Socket&lt;/code&gt;s, and &lt;code&gt;AsyncTask&lt;/code&gt;s&amp;mdash;across
device configuration changes?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To answer this question, we will first discuss some of the common
difficulties developers face when using long-running background tasks
in conjunction with the Activity lifecycle. Then, we will describe
the flaws of two common approaches to solving the problem. Finally,
we will conclude with sample code illustrating the recommended
solution, which uses retained Fragments to achieve our goal.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post addresses a common question that is frequently asked on &lt;a href=&quot;http://stackoverflow.com/q/3821423/844882&quot;&gt;StackOverflow&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the best way to retain active objects&amp;mdash;such as
running &lt;code&gt;Thread&lt;/code&gt;s, &lt;code&gt;Socket&lt;/code&gt;s, and &lt;code&gt;AsyncTask&lt;/code&gt;s&amp;mdash;across
device configuration changes?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To answer this question, we will first discuss some of the common
difficulties developers face when using long-running background tasks
in conjunction with the Activity lifecycle. Then, we will describe
the flaws of two common approaches to solving the problem. Finally,
we will conclude with sample code illustrating the recommended
solution, which uses retained Fragments to achieve our goal.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Configuration Changes &amp;amp; Background Tasks&lt;/h3&gt;

&lt;p&gt;One problem with configuration changes and the destroy-and-create cycle
that Activitys go through as a result stems from the fact that these events
are unpredictable and may occur at any time. Concurrent background tasks
only add to this problem. Assume, for example, that an Activity starts
an &lt;code&gt;AsyncTask&lt;/code&gt; and soon after the user rotates the screen, causing the
Activity to be destroyed and recreated. When the &lt;code&gt;AsyncTask&lt;/code&gt; eventually
finishes its work, it will incorrectly report its results back to the
old Activity instance, completely unaware that a new Activity has been
created. As if this wasn&amp;#39;t already an issue, the new Activity instance
might waste valuable resources by firing up the background work &lt;em&gt;again&lt;/em&gt;,
unaware that the old &lt;code&gt;AsyncTask&lt;/code&gt; is still running. For these reasons,
it is vital that we correctly and efficiently retain active objects
across Activity instances when configuration changes occur.&lt;/p&gt;

&lt;h3&gt;Bad Practice: Retain the Activity&lt;/h3&gt;

&lt;p&gt;Perhaps the hackiest and most widely abused workaround is to disable
the default destroy-and-recreate behavior by setting the &lt;code&gt;android:configChanges&lt;/code&gt;
attribute in your Android manifest. The apparent simplicity of this
approach makes it extremely attractive to developers;
&lt;a href=&quot;http://stackoverflow.com/a/5336057/844882&quot;&gt;Google engineers&lt;/a&gt;,
however, discourage its use. The primary concern is that it requires you
to handle device configuration changes manually in code. Handling
configuration changes requires you to take many additional steps to
ensure that each and every string, layout, drawable, dimension, etc.
remains in sync with the device&amp;#39;s current configuration, and if you
aren&amp;#39;t careful, your application can easily have a whole series of
resource-specific bugs as a result.&lt;/p&gt;

&lt;p&gt;Another reason why Google discourages its use is because many
developers incorrectly assume that setting &lt;code&gt;android:configChanges=&amp;quot;orientation&amp;quot;&lt;/code&gt;
(for example) will magically protect their application from
unpredictable scenarios in which the underlying Activity will be
destroyed and recreated. &lt;em&gt;This is not the case.&lt;/em&gt; Configuration
changes can occur for a number of reasons&amp;mdash;not just screen
orientation changes. Inserting your device into a display dock,
changing the default language, and modifying the device&amp;#39;s default
font scaling factor are just three examples of events that can
trigger a device configuration change, all of which signal the
system to destroy and recreate all currently running Activitys
the next time they are resumed. As a result, setting the
&lt;code&gt;android:configChanges&lt;/code&gt; attribute is generally not good practice.&lt;/p&gt;

&lt;h3&gt;Deprecated: Override &lt;code&gt;onRetainNonConfigurationInstance()&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Prior to Honeycomb&amp;#39;s release, the recommended means of transferring
active objects across Activity instances was to override the
&lt;code&gt;onRetainNonConfigurationInstance()&lt;/code&gt; and &lt;code&gt;getLastNonConfigurationInstance()&lt;/code&gt;
methods. Using this approach, transferring an active object
across Activity instances was merely a matter of returning the
active object in &lt;code&gt;onRetainNonConfigurationInstance()&lt;/code&gt; and retrieving
it in &lt;code&gt;getLastNonConfigurationInstance()&lt;/code&gt;. As of API 13, these methods
have been deprecated in favor of the more Fragment&amp;#39;s &lt;code&gt;setRetainInstance(boolean)&lt;/code&gt;
capability, which provides a much cleaner and modular means of
retaining objects during configuration changes. We discuss this
Fragment-based approach in the next section.&lt;/p&gt;

&lt;h3&gt;Recommended: Manage the Object Inside a Retained &lt;code&gt;Fragment&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Ever since the introduction of Fragments in Android 3.0, the recommended
means of retaining active objects across Activity instances is to wrap
and manage them inside of a retained &amp;quot;worker&amp;quot; Fragment. By default,
Fragments are destroyed and recreated along with their parent Activitys
when a configuration change occurs. Calling &lt;code&gt;Fragment#setRetainInstance(true)&lt;/code&gt;
allows us to bypass this destroy-and-recreate cycle, signaling the system to
retain the current instance of the fragment when the activity is recreated.
As we will see, this will prove to be extremely useful with Fragments that
hold objects like running &lt;code&gt;Thread&lt;/code&gt;s, &lt;code&gt;AsyncTask&lt;/code&gt;s, &lt;code&gt;Socket&lt;/code&gt;s, etc.&lt;/p&gt;

&lt;p&gt;The sample code below serves as a basic example of how to retain an
&lt;code&gt;AsyncTask&lt;/code&gt; across a configuration change using retained Fragments.
The code guarantees that progress updates and results are delivered
back to the currently displayed Activity instance and ensures that
we never accidentally leak an &lt;code&gt;AsyncTask&lt;/code&gt; during a configuration change.
The design consists of two classes, a &lt;code&gt;MainActivity&lt;/code&gt;...&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This Activity displays the screen&amp;#39;s UI, creates a TaskFragment&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * to manage the task, and receives progress updates and results &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * from the TaskFragment when they occur.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TaskCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTaskFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;FragmentManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFragmentManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTaskFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFragmentByTag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// If the Fragment is non-null, then it is currently being&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// retained across a configuration change.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTaskFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mTaskFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mTaskFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;task&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// TODO: initialize views, restore saved state, etc.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The four methods below are called by the TaskFragment when new&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// progress updates or results are available. The MainActivity &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// should respond by updating its UI to indicate the change.&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;...and a &lt;code&gt;TaskFragment&lt;/code&gt;...&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This Fragment manages a single background task and retains &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * itself across configuration changes.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Callback interface through which the fragment will report the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * task&amp;#39;s progress and results back to the Activity.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCallbacks&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DummyTask&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Hold a reference to the parent Activity so we can report the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * task&amp;#39;s current progress and results. The Android framework &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * will pass us a reference to the newly created Activity after &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * each configuration change.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAttach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onAttach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TaskCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * This method will only be called once when the retained&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Fragment is first created.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Retain this fragment across configuration changes.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setRetainInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Create and execute the background task.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTask&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DummyTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Set the callback to null so we don&amp;#39;t accidentally leak the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Activity instance.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDetach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDetach&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * A dummy task that performs some (dumb) background work and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * proxies progress updates and results back to the Activity.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Note that we need to check if the callbacks are null in each&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * method in case they are invoked after the Activity&amp;#39;s and&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Fragment&amp;#39;s onDestroy() method have been called.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DummyTask&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncTask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPreExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Note that we do NOT call the callback object&amp;#39;s methods&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * directly from the background thread, as this could result &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * in a race condition.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doInBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;publishProgress&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onProgressUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCancelled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ignore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onPostExecute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;h3&gt;Flow of Events&lt;/h3&gt;

&lt;p&gt;When the &lt;code&gt;MainActivity&lt;/code&gt; starts up for the first time, it instantiates and adds
the &lt;code&gt;TaskFragment&lt;/code&gt; to the Activity&amp;#39;s state. The &lt;code&gt;TaskFragment&lt;/code&gt; creates and
executes an &lt;code&gt;AsyncTask&lt;/code&gt; and proxies progress updates and results back to the
&lt;code&gt;MainActivity&lt;/code&gt; via the &lt;code&gt;TaskCallbacks&lt;/code&gt; interface. When a configuration change
occurs, the &lt;code&gt;MainActivity&lt;/code&gt; goes through its normal lifecycle events, and once
created the new Activity instance is passed to the &lt;code&gt;onAttach(Activity)&lt;/code&gt; method,
thus ensuring that the &lt;code&gt;TaskFragment&lt;/code&gt; will always hold a reference to the
currently displayed Activity instance even after the configuration change.
The resulting design is both simple and reliable; the application framework
will handle re-assigning Activity instances as they are torn down and recreated,
and the &lt;code&gt;TaskFragment&lt;/code&gt; and its &lt;code&gt;AsyncTask&lt;/code&gt; never need to worry about the
unpredictable occurrence of a configuration change. Note also that it is impossible
for &lt;code&gt;onPostExecute()&lt;/code&gt; to be executed in between the calls to &lt;code&gt;onDetach()&lt;/code&gt; and
&lt;code&gt;onAttach()&lt;/code&gt;, as explained in &lt;a href=&quot;http://stackoverflow.com/q/19964180/844882&quot;&gt;this StackOverflow answer&lt;/a&gt;
and in my reply to Doug Stevenson in
&lt;a href=&quot;https://plus.google.com/u/0/+AlexLockwood/posts/etWuiiRiqLf&quot;&gt;this Google+ post&lt;/a&gt;
(there is also some discussion about this in the comments below).&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Synchronizing background tasks with the Activity lifecycle can be tricky and
configuration changes will only add to the confusion. Fortunately, retained
Fragments make handling these events very easy by consistently maintaining a
reference to its parent Activity, even after being destroyed and recreated.&lt;/p&gt;

&lt;p&gt;A sample application illustrating how to correctly use retained Fragments to
achieve this effect is available for download on the
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.adp.retaintask&quot;&gt;Play Store&lt;/a&gt;.
The source code is available on &lt;a href=&quot;https://github.com/alexjlockwood/worker-fragments&quot;&gt;GitHub&lt;/a&gt;.
Download it, import it into Eclipse, and modify it all you want!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/images/posts/2013/04/29/worker-fragments-screenshot.png&quot;&gt;
&lt;img src=&quot;/assets/images/posts/2013/04/29/worker-fragments-screenshot.png&quot; style=&quot;max-width:400px;height=225px;&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, leave a comment if you have any questions and don&amp;#39;t forget to +1 this
blog in the top right corner!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Activitys, Threads, &amp; Memory Leaks</title>
   <link href="/2013/04/activitys-threads-memory-leaks.html"/>
   <id>/2013/04/activitys-threads-memory-leaks.html</id>
   <published>2013-04-15T00:00:00-04:00</published>
   <updated>2014-01-14T00:00:00-05:00</updated>
   <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note: the source code in this blog post is available on
&lt;a href=&quot;https://github.com/alexjlockwood/leaky-threads&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common difficulty in Android programming is coordinating long-running tasks
over the Activity lifecycle and avoiding the subtle memory leaks which might
result. Consider the Activity code below, which starts and loops a new thread
upon its creation:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Example illustrating how threads persist across configuration&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * changes (which cause the underlying Activity instance to be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * destroyed). The Activity context also leaks because the thread&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * is instantiated as an anonymous class, which holds an implicit&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * reference to the outer Activity instance, therefore preventing&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * it from being garbage collected.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exampleOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;
</summary>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: the source code in this blog post is available on
&lt;a href=&quot;https://github.com/alexjlockwood/leaky-threads&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common difficulty in Android programming is coordinating long-running tasks
over the Activity lifecycle and avoiding the subtle memory leaks which might
result. Consider the Activity code below, which starts and loops a new thread
upon its creation:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Example illustrating how threads persist across configuration&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * changes (which cause the underlying Activity instance to be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * destroyed). The Activity context also leaks because the thread&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * is instantiated as an anonymous class, which holds an implicit&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * reference to the outer Activity instance, therefore preventing&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * it from being garbage collected.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exampleOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;When a configuration change occurs, causing the entire Activity to be
destroyed and re-created, it is easy to assume that Android will clean
up after us and reclaim the memory associated with the Activity and its
running thread. However, this is not the case. Both will leak never to be
reclaimed, and the result will likely be a significant reduction in performance.&lt;/p&gt;

&lt;h3&gt;How to Leak an Activity&lt;/h3&gt;

&lt;p&gt;The first memory leak should be immediately obvious if you read my
&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/01/inner-class-handler-memory-leak.html&quot;&gt;previous post&lt;/a&gt;
on Handlers and inner classes. In Java, non-static anonymous classes hold an implicit
reference to their enclosing class. If you&amp;#39;re not careful, storing this reference
can result in the Activity being retained when it would otherwise be eligible for
garbage collection. Activity objects hold a reference to their entire view hierarchy
and all its resources, so if you leak one, you leak a lot of memory.&lt;/p&gt;

&lt;p&gt;The problem is only exacerbated by configuration changes, which signal the destruction
and re-creation of the entire underlying Activity. For example, after ten orientation
changes running the code above, we can see
(using &lt;a href=&quot;http://www.eclipse.org/mat/&quot;&gt;Eclipse Memory Analyzer&lt;/a&gt;) that each
Activity object is in fact retained in memory as a result of these implicit references:&lt;/p&gt;

&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;float: center; margin-left: 0em; text-align: left;&quot;&gt;
  &lt;tbody&gt;
    &lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a class=&quot;no-border&quot; href=&quot;/assets/images/posts/2013/04/15/activity-leak.png&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;175&quot; src=&quot;/assets/images/posts/2013/04/15/activity-leak.png&quot; width=&quot;400&quot; /&gt;&lt;/a&gt;
    &lt;/td&gt;&lt;/tr&gt;
    &lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Figure 1. Activity instances retained in memory after ten orientation changes.
    &lt;/td&gt;&lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;After each configuration change, the Android system creates a new Activity and leaves
the old one behind to be garbage collected. However, the thread holds an implicit
reference to the old Activity and prevents it from ever being reclaimed. As a result,
each new Activity is leaked and all resources associated with them are never able to be
reclaimed.&lt;/p&gt;

&lt;p&gt;The fix is easy once we&amp;#39;ve identified the source of the problem: declare the
thread as a private static inner class as shown below.&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This example avoids leaking an Activity context by declaring the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * thread as a private static inner class, but the threads still &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * continue to run even across configuration changes. The DVM has a&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * reference to all running threads and whether or not these threads&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * are garbage collected has nothing to do with the Activity lifecycle.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Active threads will continue to run until the kernel destroys your &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * application&amp;#39;s process.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exampleTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleTwo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;The new thread no longer holds an implicit reference to the Activity, and the
Activity will be eligible for garbage collection after the configuration change.&lt;/p&gt;

&lt;h3&gt;How to Leak a Thread&lt;/h3&gt;

&lt;p&gt;The second issue is that for each new Activity that is created, a thread is
leaked and never able to be reclaimed. Threads in Java are GC roots; that is,
the Dalvik Virtual Machine (DVM) keeps hard references to all active threads
in the runtime system, and as a result, threads that are left running will
never be eligible for garbage collection. For this reason, you must remember
to implement cancellation policies for your background threads! One example
of how this might be done is shown below:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Same as example two, except for this time we have implemented a&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * cancellation policy for our thread, ensuring that it is never &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * leaked! onDestroy() is usually a good place to close your active &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * threads before exiting the Activity.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;exampleThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;exampleThree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Static inner classes don&amp;#39;t hold implicit references to their&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * enclosing class, so the Activity instance won&amp;#39;t be leaked across&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * configuration changes.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Thread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mRunning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mRunning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mRunning&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SystemClock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mRunning&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;In the code above, closing the thread in &lt;code&gt;onDestroy()&lt;/code&gt; ensures that
you never accidentally leak the thread. If you want to persist the same thread
across configuration changes (as opposed to closing and re-creating a new thread
each time), consider using a retained, UI-less worker fragment to perform the
long-running task. Check out my blog post, titled
&lt;a href=&quot;http://www.androiddesignpatterns.com/2013/04/retaining-objects-across-config-changes.html&quot;&gt;Handling Configuration Changes with Fragments&lt;/a&gt;,
for an example explaining how this can be done. There is also a comprehensive
example available in the
&lt;a href=&quot;https://android.googlesource.com/platform/development/+/master/samples/ApiDemos/src/com/example/android/apis/app/FragmentRetainInstance.java&quot;&gt;API demos&lt;/a&gt;
which illustrates the concept.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In Android, coordinating long-running tasks over the Activity lifecycle can be
difficult and memory leaks can result if you aren&amp;#39;t careful. Here are some
general tips to consider when dealing with coordinating your long-running
background tasks with the Activity lifecycle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Favor static inner classes over nonstatic.&lt;/strong&gt; Each instance of a nonstatic inner
class will have an extraneous reference to its outer Activity instance. Storing
this reference can result in the Activity being retained when it would otherwise
be eligible for garbage collection. If your static inner class requires a
reference to the underlying Activity in order to function properly, make sure
you wrap the object in a &lt;code&gt;WeakReference&lt;/code&gt; to ensure that you don&amp;#39;t
accidentally leak the Activity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Don&amp;#39;t assume that Java will ever clean up your running threads for you.&lt;/strong&gt; In the
example above, it is easy to assume that when the user exits the Activity and the
Activity instance is finalized for garbage collection, any running threads associated
with that Activity will be reclaimed as well. &lt;em&gt;This is never the case.&lt;/em&gt; Java
threads will persist until either they are explicitly closed or the entire process
is killed by the Android system. As a result, it is extremely important that you
remember to implement cancellation policies for your background threads, and to
take appropriate action when Activity lifecycle events occur.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Consider whether or not you should use a Thread.&lt;/strong&gt; The Android application framework
provides many classes designed to make background threading easier for developers.
For example, consider using a Loader instead of a thread for performing short-lived
asynchronous background queries in conjunction with the Activity lifecycle. Likewise,
if the background thread is not tied to any specific Activity, consider using a
Service and report the results back to the UI using a &lt;code&gt;BroadcastReceiver&lt;/code&gt;.
Lastly, remember that everything discussed regarding threads in this blog post also
applies to &lt;code&gt;AsyncTask&lt;/code&gt;s (since the &lt;code&gt;AsyncTask&lt;/code&gt; class uses an
&lt;code&gt;ExecutorService&lt;/code&gt; to execute its tasks). However, given that &lt;code&gt;AsyncTask&lt;/code&gt;s
should only be used for short-lived operations (&amp;quot;a few seconds at most&amp;quot;, as per the
&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;documentation&lt;/a&gt;),
leaking an Activity or a thread by these means should never be an issue.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The source code for this blog post is available on
&lt;a href=&quot;https://github.com/alexjlockwood/leaky-threads&quot;&gt;GitHub&lt;/a&gt;. A standalone
application (which mirrors the source code exactly) is also available for download on
&lt;a href=&quot;https://play.google.com/store/apps/details?id=com.adp.leaky.threads&quot;&gt;Google Play&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;no-border&quot; href=&quot;https://play.google.com/store/apps/details?id=com.adp.leaky.threads&quot;&gt;
&lt;img width=&quot;320px&quot; height=&quot;180px&quot; border=&quot;0&quot; src=&quot;/assets/images/posts/2013/04/15/leaky-threads-screenshot.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, leave a comment if you have any questions and don&amp;#39;t forget to +1
this blog in the top right corner!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">How to Leak a Context: Handlers &amp; Inner Classes</title>
   <link href="/2013/01/inner-class-handler-memory-leak.html"/>
   <id>/2013/01/inner-class-handler-memory-leak.html</id>
   <published>2013-01-14T00:00:00-05:00</published>
   <updated>2014-01-05T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLeakyHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;While not readily obvious, this code can cause cause a massive memory leak.
Android Lint will give the following warning: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Android, Handler classes should be static or leaks might occur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But where exactly is the leak and how might it happen? Let&amp;#39;s determine the
source of the problem by first documenting what we know:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;Consider the following code:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;1
2
3
4
5
6
7
8
9&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLeakyHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ... &lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;While not readily obvious, this code can cause cause a massive memory leak.
Android Lint will give the following warning: &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In Android, Handler classes should be static or leaks might occur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;But where exactly is the leak and how might it happen? Let&amp;#39;s determine the
source of the problem by first documenting what we know:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;When an Android application first starts, the framework creates a 
 &lt;a href=&quot;http://developer.android.com/reference/android/os/Looper.html&quot;&gt;&lt;code&gt;Looper&lt;/code&gt;&lt;/a&gt;
 object for the application&amp;#39;s main thread. A &lt;code&gt;Looper&lt;/code&gt; implements a simple message queue,
 processing &lt;a href=&quot;http://developer.android.com/reference/android/os/Message.html&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt;
 objects in a loop one after another. All major application framework events (such
 as Activity lifecycle method calls, button clicks, etc.) are contained inside
 &lt;code&gt;Message&lt;/code&gt; objects, which are added to the &lt;code&gt;Looper&lt;/code&gt;&amp;#39;s message queue and are processed
 one-by-one. The main thread&amp;#39;s &lt;code&gt;Looper&lt;/code&gt; exists throughout the application&amp;#39;s lifecycle.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When a &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt;
 is instantiated on the main thread, it is associated with the &lt;code&gt;Looper&lt;/code&gt;&amp;#39;s message queue.
 Messages posted to the message queue will hold a reference to the &lt;code&gt;Handler&lt;/code&gt; so that the
 framework can call
 &lt;a href=&quot;http://developer.android.com/reference/android/os/Handler.html#handleMessage(android.os.Message)&quot;&gt;&lt;code&gt;Handler#handleMessage(Message)&lt;/code&gt;&lt;/a&gt;
 when the &lt;code&gt;Looper&lt;/code&gt; eventually processes the message.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In Java, non-static inner and anonymous classes hold an implicit reference to their
 outer class. Static inner classes, on the other hand, do not.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So where exactly is the memory leak? It&amp;#39;s very subtle, but consider the following code as an example:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mLeakyHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Post a message and delay its execution for 10 minutes.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mLeakyHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Go back to the previous Activity.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;When the activity is finished, the delayed message will continue to live in the main thread&amp;#39;s
message queue for 10 minutes before it is processed. The message holds a reference to the
activity&amp;#39;s &lt;code&gt;Handler&lt;/code&gt;, and the &lt;code&gt;Handler&lt;/code&gt; holds an implicit reference to its outer class (the
&lt;code&gt;SampleActivity&lt;/code&gt;, in this case). This reference will persist until the message is processed,
thus preventing the activity context from being garbage collected and leaking all of the
application&amp;#39;s resources. Note that the same is true with the anonymous Runnable class on
line 15. Non-static instances of anonymous classes hold an implicit reference to their outer
class, so the context will be leaked.&lt;/p&gt;

&lt;p&gt;To fix the problem, subclass the &lt;code&gt;Handler&lt;/code&gt; in a new file or use a static inner class instead.
Static inner classes do not hold an implicit reference to their outer class, so the activity
will not be leaked. If you need to invoke the outer activity&amp;#39;s methods from within the
&lt;code&gt;Handler&lt;/code&gt;, have the Handler hold a &lt;code&gt;WeakReference&lt;/code&gt; to the activity so you don&amp;#39;t accidentally
leak a context. To fix the memory leak that occurs when we instantiate the anonymous Runnable
class, we make the variable a static field of the class (since static instances of anonymous
classes do not hold an implicit reference to their outer class):&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Instances of static inner classes do not hold an implicit&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * reference to their outer class.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyHandler&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WeakReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyHandler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Instances of anonymous classes do not hold an implicit&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * reference to their outer class when they are &amp;quot;static&amp;quot;.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sRunnable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Post a message and delay its execution for 10 minutes.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;postDelayed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sRunnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Go back to the previous Activity.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;The difference between static and non-static inner classes is subtle, but is something
every Android developer should understand. What&amp;#39;s the bottom line? Avoid using non-static
inner classes in an activity if instances of the inner class outlive the activity&amp;#39;s
lifecycle. Instead, prefer static inner classes and hold a weak reference to the activity inside.&lt;/p&gt;

&lt;p&gt;As always, leave a comment if you have any questions and don&amp;#39;t forget to +1 this blog in
the top right corner! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Use Go to Implement your Android Backends</title>
   <link href="/2013/01/gcm-appengine-golang-android-backends.html"/>
   <id>/2013/01/gcm-appengine-golang-android-backends.html</id>
   <published>2013-01-12T00:00:00-05:00</published>
   <updated>2013-01-12T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;A couple weeks ago I wrote a &lt;a href=&quot;http://github.com/alexjlockwood/gcm&quot;&gt;library&lt;/a&gt;
that simplifies the interaction between Go-based application servers and Google Cloud
Messaging servers. I plan on covering GCM (both the application-side and server-side
aspects) in more detail in a future blog post, but for now I will just leave a link
to the library to encourage more people to write their GCM application servers using
the Go Programming Language 
(&lt;a href=&quot;https://developers.google.com/appengine/docs/go/overview&quot;&gt;Google App Engine&lt;/a&gt;,
hint hint).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;...but why Go?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m glad you asked. There are several reasons:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;A couple weeks ago I wrote a &lt;a href=&quot;http://github.com/alexjlockwood/gcm&quot;&gt;library&lt;/a&gt;
that simplifies the interaction between Go-based application servers and Google Cloud
Messaging servers. I plan on covering GCM (both the application-side and server-side
aspects) in more detail in a future blog post, but for now I will just leave a link
to the library to encourage more people to write their GCM application servers using
the Go Programming Language 
(&lt;a href=&quot;https://developers.google.com/appengine/docs/go/overview&quot;&gt;Google App Engine&lt;/a&gt;,
hint hint).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;...but why Go?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#39;m glad you asked. There are several reasons:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Go is modern.&lt;/em&gt;&lt;/strong&gt; Programming languages like C, C++, and Java
are old, designed before the advent of multicore machines, networking, and web
application development. Go was designed to be suitable for writing large Google
programs such as web servers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Go is concise, yet familiar.&lt;/em&gt;&lt;/strong&gt; Tasks that require 40+ lines of code
in Java (i.e. setting up HTTP servers and parsing JSON responses) can be done in 1 or 2
lines. Go significantly reduces the amount of work required to write simple programs,
and yet the language&amp;#39;s syntax is not too radical, still resembling the most common
procedural languages.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Go is easy to learn.&lt;/em&gt;&lt;/strong&gt; Learn the language in a day: 
&lt;a href=&quot;http://tour.golang.org&quot;&gt;A Tour of Go&lt;/a&gt; and 
&lt;a href=&quot;http://golang.org/doc/effective_go.html&quot;&gt;Effective Go&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;Go was invented at Google.&lt;/em&gt;&lt;/strong&gt; Enough said. :)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#39;s all for now... but expect a lot more on GCM, Google App Engine, and Golang
later! The comments are open as always, and don&amp;#39;t forget to +1 this post!&lt;/p&gt;

&lt;h3&gt;Links&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexjlockwood/gcm&quot;&gt;Google Cloud Messaging for Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developers.google.com/appengine/&quot;&gt;Google App Engine&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://tour.golang.org&quot;&gt;A Tour of Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://golang.org/doc/effective_go.html&quot;&gt;Effective Go&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://golang.org&quot;&gt;golang.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Google Play Services: Setup &amp; Verification</title>
   <link href="/2013/01/google-play-services-setup.html"/>
   <id>/2013/01/google-play-services-setup.html</id>
   <published>2013-01-08T00:00:00-05:00</published>
   <updated>2013-01-08T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;One of the trickiest aspects of writing a robust web-based Android application
is authentication, simply due to its asynchronous nature and the many edge cases
that one must cover. Thankfully, the recently released Google Play Services API
greatly simplifies the authentication process, providing developers with a
consistent and safe way to grant and receive OAuth2 access tokens to Google
services. Even so, there are still several cases that must be covered in order
to provide the best possible user experience. A professionally built Android
application should be able to react to even the most unlikely events, for example,
if a previously logged in user uninstalls Google Play Services, or navigates to
the system settings and clears the application’s data when the foreground Activity
is in a paused state. This post focuses on how to make use of the Google Play
Services library while still accounting for edge cases such as these.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;One of the trickiest aspects of writing a robust web-based Android application
is authentication, simply due to its asynchronous nature and the many edge cases
that one must cover. Thankfully, the recently released Google Play Services API
greatly simplifies the authentication process, providing developers with a
consistent and safe way to grant and receive OAuth2 access tokens to Google
services. Even so, there are still several cases that must be covered in order
to provide the best possible user experience. A professionally built Android
application should be able to react to even the most unlikely events, for example,
if a previously logged in user uninstalls Google Play Services, or navigates to
the system settings and clears the application’s data when the foreground Activity
is in a paused state. This post focuses on how to make use of the Google Play
Services library while still accounting for edge cases such as these.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Verifying Google Play Services&lt;/h3&gt;

&lt;p&gt;In this post, we will implement a very basic (but robust) Android application
that authenticates a user with Google services. Our implementation will consist
of a single Activity:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you probably already know, before we attempt authentication using Google
Play Services, we must first verify that the service is up-to-date and
installed on the device. This seems easy enough, but where should
these checks be performed? As with most edge-case checks, it makes the most
sense to verify that our device is properly configured in the Activity’s
&lt;code&gt;onResume()&lt;/code&gt; method. Verifying in &lt;code&gt;onResume()&lt;/code&gt; is
important because it has the application perform a check each time the
Activity is brought into the foreground, thus guaranteeing that our application
will never incorrectly assume that Google Play Services is properly configured:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkPlayServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then we&amp;#39;re good to go!&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let’s implement &lt;code&gt;checkPlayServices()&lt;/code&gt;, which will return true if and only
if Google Play Services is correctly installed and configured on the device:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkPlayServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GooglePlayServicesUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isGooglePlayServicesAvailable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConnectionResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SUCCESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GooglePlayServicesUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isUserRecoverableError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;showErrorDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This device is not supported.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_LONG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showErrorDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;GooglePlayServicesUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getErrorDialog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;REQUEST_CODE_RECOVER_PLAY_SERVICES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And we implement &lt;code&gt;onActivityResult&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQUEST_CODE_RECOVER_PLAY_SERVICES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;REQUEST_CODE_RECOVER_PLAY_SERVICES:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESULT_CANCELED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Google Play Services must be installed.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If Google Play Services are available, the method will return true. If
Google Play Services is not available and error is deemed &amp;quot;unrecoverable,&amp;quot;
a Toast will indicate to the user that the device is not supported. Otherwise,
an error dialog will be shown and a result will eventually propagate back to
&lt;code&gt;onActivityResult&lt;/code&gt;. Note that &lt;code&gt;onActivityResult&lt;/code&gt; is called &lt;em&gt;before&lt;/em&gt; &lt;code&gt;onResume&lt;/code&gt;,
so when a result is returned, we will perform one final check just to be sure
that everything has been setup correctly.&lt;/p&gt;

&lt;h3&gt;Checking the Currently Logged In User&lt;/h3&gt;

&lt;p&gt;What we have so far is enough to ensure that our users will be able to use our
application if and only if Google Play Services is installed and up-to-date.
Now let’s assume that our application also stores the name of the currently
logged in user in its &lt;code&gt;SharedPreferences&lt;/code&gt;. How should our application respond
in the case that the current user is unexpectedly logged out (i.e. the user has
clicked &amp;quot;Clear data&amp;quot; in the app’s system settings)? It turns out that we can do
something very similar. (Note that the code below makes use of a simple utility
file named &lt;a href=&quot;https://gist.github.com/4477849&quot;&gt;&lt;code&gt;AccountUtils.java&lt;/code&gt;&lt;/a&gt;,
which provides some helper methods for reading/writing account information to the
app’s &lt;code&gt;SharedPreferences&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;First, define a method that will verify the existence of a single authenticated
user in the application’s shared preferences and update the &lt;code&gt;onResume()&lt;/code&gt; method
accordingly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkPlayServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;checkUserAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then we&amp;#39;re good to go!&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkPlayServices&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;checkUserAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAccountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accountName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then the user was not found in the SharedPreferences. Either the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// application deliberately removed the account, or the application&amp;#39;s&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// data has been forcefully erased.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;showAccountPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getGoogleAccountByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Then the account has since been removed.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AccountUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeAccount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;showAccountPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;showAccountPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickAccountIntent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AccountPicker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newChooseAccountIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GoogleAuthUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GOOGLE_ACCOUNT_TYPE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; 
      &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;startActivityForResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickAccountIntent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQUEST_CODE_PICK_ACCOUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that in the case that a user is not already signed in, an &lt;code&gt;AccountPicker&lt;/code&gt;
dialog will be launched, requesting that the user selects a Google account with
which the application will use to authenticate requests. The result will
eventually be returned back to the Activity, so we must update the &lt;code&gt;onActivityResult&lt;/code&gt;
method accordingly:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQUEST_CODE_RECOVER_PLAY_SERVICES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1001&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;REQUEST_CODE_PICK_ACCOUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1002&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Intent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;REQUEST_CODE_RECOVER_PLAY_SERVICES:&lt;/span&gt;
      &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;REQUEST_CODE_PICK_ACCOUNT:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESULT_OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStringExtra&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;AccountManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;KEY_ACCOUNT_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;AccountUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAccountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RESULT_CANCELED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;makeText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;This application requires a Google account.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
            &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LENGTH_SHORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onActivityResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As was the case before, &lt;code&gt;onResume&lt;/code&gt; will be called after &lt;code&gt;onActivityResult&lt;/code&gt;, ensuring
that Google Play Services is still installed and up-to-date, and that a Google account
has indeed been selected and saved to the disk.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;However unlikely they might be, covering edge cases in your Android applications is
very important. If a user deliberately tries to break your application (by, for
example, clearing the application’s data in the system settings), the app should
immediately recognize the event and act appropriately. The same concept outlined
in this post applies to many areas of Android development, not just those apps
which make use of Google Play Services.&lt;/p&gt;

&lt;p&gt;The full source code for this post is provided here 
&lt;a href=&quot;https://gist.github.com/4477849&quot;&gt;&lt;code&gt;AccountUtils.java&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://gist.github.com/4477939&quot;&gt;&lt;code&gt;AuthActivity.java&lt;/code&gt;&lt;/a&gt;. As always, leave
a comment if you have any questions and don’t forget to +1 this post!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">SQLite, Content Providers, &amp; Thread Safety</title>
   <link href="/2012/10/sqlite-contentprovider-thread-safety.html"/>
   <id>/2012/10/sqlite-contentprovider-thread-safety.html</id>
   <published>2012-10-11T00:00:00-04:00</published>
   <updated>2012-10-11T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;A common source of confusion when implementing &lt;code&gt;ContentProvider&lt;/code&gt;s is that of thread-safety.
We all know that any potentially expensive query should be asynchronous so as not to block
the UI thread, but when, if ever, is it OK to make calls to the &lt;code&gt;ContentProvider&lt;/code&gt; from
multiple threads?&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;A common source of confusion when implementing &lt;code&gt;ContentProvider&lt;/code&gt;s is that of thread-safety.
We all know that any potentially expensive query should be asynchronous so as not to block
the UI thread, but when, if ever, is it OK to make calls to the &lt;code&gt;ContentProvider&lt;/code&gt; from
multiple threads?&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Threads and Content Providers&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://developer.android.com/reference/android/content/ContentProvider.html&quot;&gt;documentation&lt;/a&gt;
on ContentProviders warns that its methods may be called from multiple threads and therefore
must be thread-safe:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Data access methods (such as &lt;code&gt;insert(Uri, ContentValues)&lt;/code&gt; and 
&lt;code&gt;update(Uri, ContentValues, String, String[]))&lt;/code&gt; may be called from many
threads at once, and must be thread-safe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, Android &lt;strong&gt;does not&lt;/strong&gt; synchronize access to the ContentProvider for you.
If two calls to the same method are made simultaneously from separate threads, neither
call will wait for the other. Requiring the client to deal with concurrency themselves
makes sense from a framework developer&amp;#39;s point of view. The abstract &lt;code&gt;ContentProvider&lt;/code&gt; class
cannot assume that its subclasses will require synchronization, as doing so would be
horribly inefficient.&lt;/p&gt;

&lt;h3&gt;Ensuring Thread Safety&lt;/h3&gt;

&lt;p&gt;So now that we know that the ContentProvider is not thread safe, what do we need to
do in order to eliminate potential race conditions? Just make every method
&lt;code&gt;synchronized&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;Well... no, not necessarily. Consider a ContentProvider that uses a &lt;code&gt;SQLiteDatabase&lt;/code&gt;
as its backing data source. As per the
&lt;a href=&quot;http://developer.android.com/reference/android/database/sqlite/SQLiteDatabase.html#setLockingEnabled(boolean)&quot;&gt;documentation&lt;/a&gt;,
access to the &lt;code&gt;SQLiteDatabase&lt;/code&gt; is synchronized by default, thus guaranteeing that
no two threads will ever touch it at the same time. In this case, synchronizing
each of the ContentProvider&amp;#39;s methods is both unnecessary and costly. Remember
that a &lt;code&gt;ContentProvider&lt;/code&gt; serves as a wrapper around the underlying data source;
whether or not you must take extra measures to ensure thread safety often depends
on the data source itself.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Although the ContentProvider lacks in thread-safety, often times you will find that
no further action is required on your part with respect to preventing potential
race conditions. The canonical example is when your ContentProvider is backed by
a &lt;code&gt;SQLiteDatabase&lt;/code&gt;; when two threads attempt to write to the database at the same
time, the &lt;code&gt;SQLiteDatabase&lt;/code&gt; will lock itself down, ensuring that one will wait until
the other has completed. Each thread will be given mutually exclusive access to the
data source, ensuring the thread safety is met.&lt;/p&gt;

&lt;p&gt;This has been a rather short post, so don&amp;#39;t hesitate to leave a comment if you have
any clarifying questions. Don&amp;#39;t forget to +1 this post below if you found it helpful!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Tutorial: AppListLoader (part 4)</title>
   <link href="/2012/09/tutorial-loader-loadermanager.html"/>
   <id>/2012/09/tutorial-loader-loadermanager.html</id>
   <published>2012-09-16T00:00:00-04:00</published>
   <updated>2012-09-16T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;This will be my fourth and final post on Loaders and the LoaderManager. Let me know in the comments if they have been helpful!
Links to my previous Loader-related posts are given below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to public demand, I&amp;#39;ve written a sample application that illustrates how to correctly implement a custom Loader.
The application is named &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.adp.loadercustom&quot;&gt;AppListLoader&lt;/a&gt;,
and it is a simple demo application that queries and lists all installed applications on your Android device.
The application is a modified, re-thought (and bug-free) extension of the
&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android-apps/4.1.1_r1/com/example/android/apis/app/LoaderCustom.java&quot;&gt;LoaderCustom.java&lt;/a&gt;
sample that is provided in the API Demos. The application uses an &lt;code&gt;AppListLoader&lt;/code&gt;
(a subclass of &lt;code&gt;AsyncTaskLoader&lt;/code&gt;) to query its data, and the LoaderManager to
manage the Loader across the Activity/Fragment lifecycle:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This will be my fourth and final post on Loaders and the LoaderManager. Let me know in the comments if they have been helpful!
Links to my previous Loader-related posts are given below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Due to public demand, I&amp;#39;ve written a sample application that illustrates how to correctly implement a custom Loader.
The application is named &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.adp.loadercustom&quot;&gt;AppListLoader&lt;/a&gt;,
and it is a simple demo application that queries and lists all installed applications on your Android device.
The application is a modified, re-thought (and bug-free) extension of the
&lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android-apps/4.1.1_r1/com/example/android/apis/app/LoaderCustom.java&quot;&gt;LoaderCustom.java&lt;/a&gt;
sample that is provided in the API Demos. The application uses an &lt;code&gt;AppListLoader&lt;/code&gt;
(a subclass of &lt;code&gt;AsyncTaskLoader&lt;/code&gt;) to query its data, and the LoaderManager to
manage the Loader across the Activity/Fragment lifecycle:&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a class=&quot;no-border&quot; href=&quot;/assets/images/posts/2012/09/16/app-screenshot.png&quot;&gt;
&lt;img src=&quot;/assets/images/posts/2012/09/16/app-screenshot.png&quot; style=&quot;border:0px; width:400px; height:269px;&quot;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The AppListLoader registers two &lt;code&gt;BroadcastReceiver&lt;/code&gt;s which observe/listen for system-wide broadcasts that
impact the underlying data source. The &lt;code&gt;InstalledAppsObserver&lt;/code&gt; listens for newly installed, updated, or
removed applications, and the &lt;code&gt;SystemLocaleObserver&lt;/code&gt; listens for locale changes. For example, if the user
changes the language from English to Spanish, the &lt;code&gt;SystemLocaleObserver&lt;/code&gt; will notify the AppListLoader to
re-query its data so that the application can display each application&amp;#39;s name in Spanish (assuming an alternate
Spanish name has been provided). Click &amp;quot;Change language&amp;quot; in the options menu and watch the Loader&amp;#39;s seamless
reaction to the event (it&amp;#39;s awesome, isn&amp;#39;t it? :P).&lt;/p&gt;

&lt;p&gt;Log messages are written to the logcat whenever an important Loader/LoaderManager-related event occurs, so be
sure to run the application while analyzing the logcat! Hopefully it&amp;#39;ll give you a better understanding of how
Loaders work in conjunction with the LoaderManager and the Activity/Fragment lifecycle. Be sure to filter the
logcat by application name (&amp;quot;com.adp.loadercustom&amp;quot;) for the best results!&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;no-border&quot; href=&quot;/assets/images/posts/2012/09/16/eclipse-screenshot.png&quot;&gt;
&lt;img src=&quot;/assets/images/posts/2012/09/16/eclipse-screenshot.png&quot; style=&quot;border:0px; width:400px; height:260px;&quot;/&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can download the application from Google Play by clicking the badge below:&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;no-border&quot; href=&quot;https://play.google.com/store/apps/details?id=com.adp.loadercustom&quot;&gt;
&lt;img src=&quot;/assets/images/posts/2012/09/16/google-play-badge.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/alexjlockwood/AppListLoader&quot;&gt;The source code is available on GitHub&lt;/a&gt;.
An excessive amount of comments flesh out the entire application-Loader workflow. Download it,
import it as an eclipse project, and modify it all you want!&lt;/p&gt;

&lt;p&gt;Let me know if these posts have been helpful by leaving a comment below! As always,
don&amp;#39;t hesitate to ask questions either!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Follow This Blog On Google Currents!</title>
   <link href="/2012/08/follow-this-blog-on-google-currents_8022.html"/>
   <id>/2012/08/follow-this-blog-on-google-currents_8022.html</id>
   <published>2012-08-26T00:00:00-04:00</published>
   <updated>2012-08-26T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve recently made this blog available on Google Currents! Install the application and
subscribe by clicking &lt;a href=&quot;https://www.google.com/producer/editions/CAow5Ir3AQ/android_design_patterns&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have never used Google Currents, I strongly recommend that you try it out. It&amp;#39;s a
really great way to keep up with the latest news, blogs, and your favorite Google+ streams,
and it works seamlessly offline (which I&amp;#39;ve found is great for long plane rides). If you&amp;#39;re
a long time Flipboard user, I recommend you give it a try as well... in my opinion, Currents
is easier to navigate and feels much more like a native Android application. That said,
I do tend to be a bit biased towards the native Google apps. :P&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;Hi all,&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve recently made this blog available on Google Currents! Install the application and
subscribe by clicking &lt;a href=&quot;https://www.google.com/producer/editions/CAow5Ir3AQ/android_design_patterns&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have never used Google Currents, I strongly recommend that you try it out. It&amp;#39;s a
really great way to keep up with the latest news, blogs, and your favorite Google+ streams,
and it works seamlessly offline (which I&amp;#39;ve found is great for long plane rides). If you&amp;#39;re
a long time Flipboard user, I recommend you give it a try as well... in my opinion, Currents
is easier to navigate and feels much more like a native Android application. That said,
I do tend to be a bit biased towards the native Google apps. :P&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;As always, don&amp;#39;t hesitate to leave a comment if you find a bug or have any suggestions on
how I can improve the edition! I&amp;#39;m going to try really hard to keep it up-to-date for those
of you who follow this blog and can&amp;#39;t get enough of Google Currents!&lt;/p&gt;

&lt;p&gt;Cheers,&lt;br&gt;
Alex&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Implementing Loaders (part 3)</title>
   <link href="/2012/08/implementing-loaders.html"/>
   <id>/2012/08/implementing-loaders.html</id>
   <published>2012-08-21T00:00:00-04:00</published>
   <updated>2014-01-16T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;This post introduces the &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; class as well as custom Loader implementations.
This is the third of a series of posts I will be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First things first, if you haven’t read my previous two posts, I suggest you do so before continuing further.
Here is a very brief summary of what this blog has covered so far.
&lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders (part 1)&lt;/a&gt; described the
flaws of the pre-Honeycomb 3.0 API and its tendency to perform lengthy queries on the main UI thread.
These UI-unfriendly APIs resulted in unresponsive applications and were the primary motivation for introducing
the Loader and the LoaderManager in Android 3.0.
&lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager (part 2)&lt;/a&gt; introduced
the LoaderManager class and its role in delivering asynchronously loaded data to the client. The LoaderManager
manages its Loaders across the Activity/Fragment lifecycle and can retain loaded data across configuration changes.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post introduces the &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; class as well as custom Loader implementations.
This is the third of a series of posts I will be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;First things first, if you haven’t read my previous two posts, I suggest you do so before continuing further.
Here is a very brief summary of what this blog has covered so far.
&lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders (part 1)&lt;/a&gt; described the
flaws of the pre-Honeycomb 3.0 API and its tendency to perform lengthy queries on the main UI thread.
These UI-unfriendly APIs resulted in unresponsive applications and were the primary motivation for introducing
the Loader and the LoaderManager in Android 3.0.
&lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager (part 2)&lt;/a&gt; introduced
the LoaderManager class and its role in delivering asynchronously loaded data to the client. The LoaderManager
manages its Loaders across the Activity/Fragment lifecycle and can retain loaded data across configuration changes.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;Loader Basics&lt;/h3&gt;

&lt;p&gt;Loaders are responsible for performing queries on a separate thread, monitoring the data source for changes,
and delivering new results to a registered listener (usually the LoaderManager) when changes are detected.
These characteristics make Loaders a powerful addition to the Android SDK for several reasons:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;They encapsulate the actual loading of data.&lt;/b&gt; The Activity/Fragment no longer needs to know how to load data.
 Instead, the Activity/Fragment delegates the task to the Loader, which carries out the request behind the scenes
 and has its results delivered back to the Activity/Fragment.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;They abstract out the idea of threads from the client.&lt;/b&gt; The Activity/Fragment does not need to worry
 about offloading queries to a separate thread, as the Loader will do this automatically. This reduces
 code complexity and eliminates potential thread-related bugs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;They are entirely &lt;i&gt;event-driven&lt;/i&gt;.&lt;/b&gt; Loaders monitor the underlying data source and automatically
 perform new loads for up-to-date results when changes are detected. This makes working with Loaders
 easy, as the client can simply trust that the Loader will auto-update its data on its own.
 All the Activity/Fragment has to do is initialize the Loader and respond to any results that might
 be delivered. Everything in between is done by the Loader.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Loaders are a somewhat advanced topic and may take some time getting used to. We begin by analyzing
its four defining characteristics in the next section.&lt;/p&gt;

&lt;h3&gt;What Makes Up a Loader?&lt;/h3&gt;

&lt;p&gt;There are four characteristics which ultimately determine a Loader’s behavior:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;A task to perform the asynchronous load.&lt;/b&gt; To ensure that loads are done on a separate thread,
 subclasses should extend &lt;code&gt;AsyncTaskLoader&amp;lt;D&amp;gt;&lt;/code&gt; as opposed to the &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; class.
 &lt;code&gt;AsyncTaskLoader&amp;lt;D&amp;gt;&lt;/code&gt; is an abstract Loader which provides an &lt;code&gt;AsyncTask&lt;/code&gt; to do its work.
 When subclassed, implementing the asynchronous task is as simple as implementing the abstract
 &lt;code&gt;loadInBackground()&lt;/code&gt; method, which is called on a worker thread to perform the data load.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;A registered listener to receive the Loader&amp;#39;s results when it completes a load.&lt;/b&gt;&lt;sup&gt;&lt;a href=&quot;#footnote1&quot; id=&quot;ref1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;
 For each of its Loaders, the LoaderManager registers an &lt;code&gt;OnLoadCompleteListener&amp;lt;D&amp;gt;&lt;/code&gt; which will forward
 the Loader’s delivered results to the client with a call to &lt;code&gt;onLoadFinished(Loader&amp;lt;D&amp;gt; loader, D result)&lt;/code&gt;.
 Loaders should deliver results to these registered listeners with a call to &lt;code&gt;Loader#deliverResult(D result)&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;b&gt;One of three&lt;sup&gt;&lt;a href=&quot;#footnote2&quot; id=&quot;ref2&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; distinct states.&lt;/b&gt; Any given Loader will either be in a
 &lt;em&gt;started&lt;/em&gt;, &lt;em&gt;stopped&lt;/em&gt;, or &lt;em&gt;reset&lt;/em&gt; state:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Loaders in a &lt;em&gt;started state&lt;/em&gt; execute loads and may deliver their results to the listener at any
time. Started Loaders should monitor for changes and perform new loads when changes are detected.
Once started, the Loader will remain in a started state until it is either stopped or reset.
This is the only state in which &lt;code&gt;onLoadFinished&lt;/code&gt; will ever be called.&lt;/li&gt;
&lt;li&gt;Loaders in a &lt;em&gt;stopped state&lt;/em&gt; continue to monitor for changes but should &lt;strong&gt;not&lt;/strong&gt;
deliver results to the client. From a stopped state, the Loader may either be started or reset.&lt;/li&gt;
&lt;li&gt;Loaders in a &lt;em&gt;reset state&lt;/em&gt; should &lt;strong&gt;not&lt;/strong&gt; execute new loads, should &lt;strong&gt;not&lt;/strong&gt; deliver new
results, and should &lt;strong&gt;not&lt;/strong&gt; monitor for changes. When a loader enters a reset state, it should
invalidate and free any data associated with it for garbage collection (likewise, the client should
make sure they remove any references to this data, since it will no longer be available). More
often than not, reset Loaders will never be called again; however, in some cases they may be started,
so they should be able to start running properly again if necessary.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;An observer to receive notifications when the data source has changed.&lt;/strong&gt; Loaders should implement an observer of some sort
 (i.e. a &lt;code&gt;ContentObserver&lt;/code&gt;, a &lt;code&gt;BroadcastReceiver&lt;/code&gt;, etc.) to monitor the underlying data source for changes.
 When a change is detected, the observer should call &lt;code&gt;Loader#onContentChanged()&lt;/code&gt;, which will either (a) force a new
 load if the Loader is in a started state or, (b) raise a flag indicating that a change has been made so that if the Loader
 is ever started again, it will know that it should reload its data.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By now you should have a basic understanding of how Loaders work. If not, I suggest you let it sink in for a bit and
come back later to read through once more (reading the
&lt;a href=&quot;http://developer.android.com/reference/android/content/Loader.html&quot;&gt;documentation&lt;/a&gt; never hurts either!).
That being said, let’s get our hands dirty with the actual code!&lt;/p&gt;

&lt;h3&gt;Implementing the Loader&lt;/h3&gt;

&lt;p&gt;As I stated earlier, there is a lot that you must keep in mind when implementing your own custom Loaders.
Subclasses must implement &lt;code&gt;loadInBackground()&lt;/code&gt; and should override &lt;code&gt;onStartLoading()&lt;/code&gt;,
&lt;code&gt;onStopLoading()&lt;/code&gt;, &lt;code&gt;onReset()&lt;/code&gt;, &lt;code&gt;onCanceled()&lt;/code&gt;, and
&lt;code&gt;deliverResult(D results)&lt;/code&gt; to achieve a fully functioning Loader. Overriding these methods is
very important as the LoaderManager will call them regularly depending on the state of the Activity/Fragment
lifecycle. For example, when an Activity is first started, the Activity instructs the LoaderManager to
start each of its Loaders in &lt;code&gt;Activity#onStart()&lt;/code&gt;. If a Loader is not already started, the
LoaderManager calls &lt;code&gt;startLoading()&lt;/code&gt;, which puts the Loader in a started state and immediately
calls the Loader’s &lt;code&gt;onStartLoading()&lt;/code&gt; method. In other words, a lot of work that the LoaderManager
does behind the scenes &lt;strong&gt;relies on the Loader being correctly implemented&lt;/strong&gt;, so don’t take the task of
implementing these methods lightly!&lt;/p&gt;

&lt;p&gt;The code below serves as a template of what a Loader implementation typically looks like. The &lt;code&gt;SampleLoader&lt;/code&gt;
queries a list of &lt;code&gt;SampleItem&lt;/code&gt; objects and delivers a &lt;code&gt;List&amp;lt;SampleItem&amp;gt;&lt;/code&gt; to the client:&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleLoader&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AsyncTaskLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// We hold a reference to the Loader’s data here.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SampleLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Loaders may be used across multiple Activitys (assuming they aren&amp;#39;t&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// bound to the LoaderManager), so NEVER hold a reference to the context&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// directly. Doing so will cause you to leak an entire Activity&amp;#39;s context.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The superclass constructor will store a reference to the Application&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Context instead, and can be retrieved with a call to getContext().&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/****************************************************/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/** (1) A task that performs the asynchronous load **/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/****************************************************/&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadInBackground&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// This method is called on a background thread and should generate a&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// new set of data to be delivered back to the client.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// TODO: Perform the query here and add the results to &amp;#39;data&amp;#39;.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/********************************************************/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/** (2) Deliver the results to the registered listener **/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/********************************************************/&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deliverResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// The Loader has been reset; ignore the result and invalidate the data.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;releaseResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Hold a reference to the old data so it doesn&amp;#39;t get garbage collected.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We must protect it until the new data has been delivered.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isStarted&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// If the Loader is in a started state, deliver the results to the&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// client. The superclass method does this for us.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deliverResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Invalidate the old data as we don&amp;#39;t need it any more.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;releaseResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/*********************************************************/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/** (3) Implement the Loader’s state-dependent behavior **/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*********************************************************/&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStartLoading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Deliver any previously loaded data immediately.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;deliverResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Begin monitoring the underlying data source.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// TODO: register the observer&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;takeContentChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// When the observer detects a change, it should call onContentChanged()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// on the Loader, which will cause the next call to takeContentChanged()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// to return true. If this is ever the case (or if the current data is&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// null), we force a new load.&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;forceLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStopLoading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The Loader is in a stopped state, so we should attempt to cancel the &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// current load (if there is one).&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cancelLoad&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Note that we leave the observer as is. Loaders in a stopped state&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// should still monitor the data source for changes so that the Loader&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will know to force a new load if it is ever started again.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onReset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Ensure the loader has been stopped.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;onStopLoading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// At this point we can release the resources associated with &amp;#39;mData&amp;#39;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;releaseResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The Loader is being reset, so we should stop monitoring for changes.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// TODO: unregister the observer&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;mObserver&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCanceled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Attempt to cancel the current asynchronous load.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCanceled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The load has been canceled, so we should release the resources&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// associated with &amp;#39;data&amp;#39;.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;releaseResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;releaseResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// For a simple List, there is nothing to do. For something like a Cursor, we &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// would close it in this method. All resources associated with the Loader&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// should be released here.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/*********************************************************************/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/** (4) Observer which receives notifications when the data changes **/&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*********************************************************************/&lt;/span&gt;
 
  &lt;span class=&quot;c1&quot;&gt;// NOTE: Implementing an observer is outside the scope of this post (this example&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// uses a made-up &amp;quot;SampleObserver&amp;quot; to illustrate when/where the observer should &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// be initialized). &lt;/span&gt;
  
  &lt;span class=&quot;c1&quot;&gt;// The observer could be anything so long as it is able to detect content changes&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// and report them to the loader with a call to onContentChanged(). For example,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// if you were writing a Loader which loads a list of all installed applications&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// on the device, the observer could be a BroadcastReceiver that listens for the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ACTION_PACKAGE_ADDED intent, and calls onContentChanged() on the particular &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Loader whenever the receiver detects that a new application has been installed.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Please don’t hesitate to leave a comment if you still find this confusing! :)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SampleObserver&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mObserver&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope these posts were useful and gave you a better understanding of how Loaders and the LoaderManager work
together to perform asynchronous, auto-updating queries. Remember that Loaders are your friends... if you use
them, your app will benefit in both responsiveness and the amount of code you need to write to get everything
working properly! Hopefully I could help lessen the learning curve a bit by detailing them out!&lt;/p&gt;

&lt;p&gt;As always, please don’t hesitate to leave a comment if you have any questions! And don&amp;#39;t
forget to +1 this blog in the top right corner if you found it helpful!&lt;/p&gt;

&lt;hr class=&quot;footnote-divider&quot; /&gt;

&lt;p&gt;&lt;sup id=&quot;footnote1&quot;&gt;1&lt;/sup&gt; You don&amp;#39;t need to worry about registering a listener for your Loader unless you plan on using it without the LoaderManager. The LoaderManager will act as this &amp;quot;listener&amp;quot; and will forward any results that the Loader delivers to the &lt;code&gt;LoaderCallbacks#onLoadFinished&lt;/code&gt; method. &lt;a href=&quot;#ref1&quot; title=&quot;Jump to footnote 1.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;sup id=&quot;footnote2&quot;&gt;2&lt;/sup&gt; Loaders may also be in an &lt;a href=&quot;http://developer.android.com/reference/android/content/Loader.html#onAbandon()&quot;&gt;&amp;quot;abandoned&amp;quot;&lt;/a&gt; state. This is an optional intermediary state between &amp;quot;stopped&amp;quot; and &amp;quot;reset&amp;quot; and is not discussed here for the sake of brevity. That said, in my experience implementing &lt;code&gt;onAbandon()&lt;/code&gt; is usually not necessary. &lt;a href=&quot;#ref2&quot; title=&quot;Jump to footnote 2.&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">&quot;Exit Application?&quot; Dialogs Are Evil, Don&#39;t Use Them!</title>
   <link href="/2012/08/exit-application-dialogs-are-evil-dont.html"/>
   <id>/2012/08/exit-application-dialogs-are-evil-dont.html</id>
   <published>2012-08-07T00:00:00-04:00</published>
   <updated>2012-08-07T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;Here&amp;#39;s a question that is worth thinking about:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should I implement an &amp;quot;Exit application?&amp;quot; dialog in my app?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my experience, the answer is almost always &lt;strong&gt;no&lt;/strong&gt;. Consider the official Flickr app,
as an example. At the main screen, the user clicks the back button and is immediately
prompted with a dialog, questioning whether or not the user wishes to exit the application:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;Here&amp;#39;s a question that is worth thinking about:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Should I implement an &amp;quot;Exit application?&amp;quot; dialog in my app?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my experience, the answer is almost always &lt;strong&gt;no&lt;/strong&gt;. Consider the official Flickr app,
as an example. At the main screen, the user clicks the back button and is immediately
prompted with a dialog, questioning whether or not the user wishes to exit the application:&lt;/p&gt;

&lt;!--more--&gt;

&lt;table&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;
&lt;a class=&quot;no-border&quot; href=&quot;/assets/images/posts/2012/08/07/back-button-pressed.png&quot;&gt;&lt;img alt=&quot;Back button pressed.&quot; src=&quot;/assets/images/posts/2012/08/07/back-button-pressed.png&quot;/&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;
&lt;a class=&quot;no-border&quot; href=&quot;/assets/images/posts/2012/08/07/dialog-showing.png&quot;&gt;&lt;img alt=&quot;An exit dialog is shown.&quot; src=&quot;/assets/images/posts/2012/08/07/dialog-showing.png&quot;/&gt;&lt;/a&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;(a) Back button pressed.&lt;/td&gt;
&lt;td style=&quot;text-align: center;&quot;&gt;(b) &quot;Exit Flickr?&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;So what went wrong? Well, pretty much everything, at least in my opinion.
Here are the three major flaws I see in Flickr&amp;#39;s decision to include the dialog:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It slows down the user experience.&lt;/strong&gt; An additional click is required to leave the application.
 Sure, it doesn&amp;#39;t seem like much... but zero clicks is always better than one. Including the
 dialog will annoy the occasional meticulous power user and will make it much more likely
 that people like me will write-up angry rants about it online. To make matters worse, Flickr&amp;#39;s
 dialog incorrectly positions the &amp;quot;OK&amp;quot; and  &amp;quot;Cancel&amp;quot; buttons, which as of Android 4.0, should be
 positioned on the right and left respectively. This is also not a &lt;em&gt;huge&lt;/em&gt; deal, but it forces
 users to think more than they should need to, and the simple action of exiting the application is
 no longer seamless as a result.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It is inconsistent.&lt;/strong&gt; Name one native Android application that warns the user when they are
 about to exit the application. If you can&amp;#39;t, that&amp;#39;s because there are none. Of all the familiar,
 Google-made Android apps (Gmail, Google Drive, etc.), exactly &lt;em&gt;none&lt;/em&gt; of them exhibit this
 behavior. The user expects the back button to bring him or her back to the top activity on the
 Activity Stack; there is no reason why it shouldn&amp;#39;t do otherwise in this simple situation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It serves absolutely no purpose.&lt;/strong&gt; What baffles me the most, however, is that there is no
 reason to confirm exit in the first place. &lt;em&gt;Maybe&lt;/em&gt; the dialog would be OK if there was a
 long-running operation running in the background that is specific to the Activity (i.e. an
 &lt;code&gt;AsyncTask&lt;/code&gt; that the user might not want canceled). A dialog &lt;em&gt;might&lt;/em&gt; also
 make sense if the application took a long time to load, for example, a fancy, video intensive FPS like
 &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.madfingergames.deadtrigger&quot;&gt;Dead Trigger&lt;/a&gt;.
 In Flickr&amp;#39;s case, there is no acceptable reason why the user shouldn&amp;#39;t be allowed to &amp;quot;back-out&amp;quot; of
 the application immediately.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In my opinion, dialogs are both slow and annoying, and should be used as little as possible.
Always prefer the faster &amp;quot;edit in place&amp;quot; user model (as described
&lt;a href=&quot;http://developer.android.com/reference/android/app/Activity.html#SavingPersistentState&quot;&gt;here&lt;/a&gt;)
when it comes to saving persistent state, and never prompt the user when they wish to &amp;quot;back-out&amp;quot; of the
application unless you have a &lt;em&gt;very&lt;/em&gt; good reason for doing so.&lt;/p&gt;

&lt;p&gt;As always, let me know if you agree or disagree in the comments below!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; For more discussion on this topic, I recommend reading through the content/comments
of &lt;a href=&quot;https://plus.google.com/118417777153109946393/posts/EiXqUDrr6jT&quot;&gt;this Google+ post&lt;/a&gt; (made by
&lt;a class=&quot;g-profile&quot; href=&quot;http://plus.google.com/118417777153109946393&quot; target=&quot;_blank&quot;&gt;+Cyril Mottier&lt;/a&gt;,
a very talented Android developer recognized by Google as a
&lt;a href=&quot;https://developers.google.com/experts/&quot;&gt;Android Developer Expert&lt;/a&gt;).&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Understanding the LoaderManager (part 2)</title>
   <link href="/2012/07/understanding-loadermanager.html"/>
   <id>/2012/07/understanding-loadermanager.html</id>
   <published>2012-07-22T00:00:00-04:00</published>
   <updated>2012-07-22T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;This post introduces the &lt;code&gt;LoaderManager&lt;/code&gt; class. This is the second of a series of posts I will
be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Understanding the &lt;code&gt;LoaderManager&lt;/code&gt; requires some general knowledge about how &lt;code&gt;Loader&lt;/code&gt;s
are work. Their implementation will be covered extensively in my
&lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;next post&lt;/a&gt;. For now, you should think
of Loaders as simple, self-contained objects that (1) load data on a separate thread, and (2) monitor the underlying data
source for updates, re-querying when changes are detected. This is more than enough to get you through the contents
of this post. All Loaders are assumed to be 100% correctly implemented in this post.&lt;/p&gt;

&lt;h3&gt;What is the &lt;code&gt;LoaderManager&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Simply stated, the &lt;code&gt;LoaderManager&lt;/code&gt; is responsible for managing one or more &lt;code&gt;Loader&lt;/code&gt;s
associated with an Activity or Fragment. Each Activity and each Fragment has exactly one LoaderManager
instance that is in charge of starting, stopping, retaining, restarting, and destroying its Loaders.
These events are sometimes initiated directly by the client, by calling &lt;code&gt;initLoader()&lt;/code&gt;,
&lt;code&gt;restartLoader()&lt;/code&gt;, or &lt;code&gt;destroyLoader()&lt;/code&gt;. Just as often, however, these events
are triggered by major Activity/Fragment lifecycle events. For example, when an Activity is destroyed,
the Activity instructs its LoaderManager to destroy and close its Loaders (as well as any resources
associated with them, such as a Cursor).&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post introduces the &lt;code&gt;LoaderManager&lt;/code&gt; class. This is the second of a series of posts I will
be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Understanding the &lt;code&gt;LoaderManager&lt;/code&gt; requires some general knowledge about how &lt;code&gt;Loader&lt;/code&gt;s
are work. Their implementation will be covered extensively in my
&lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;next post&lt;/a&gt;. For now, you should think
of Loaders as simple, self-contained objects that (1) load data on a separate thread, and (2) monitor the underlying data
source for updates, re-querying when changes are detected. This is more than enough to get you through the contents
of this post. All Loaders are assumed to be 100% correctly implemented in this post.&lt;/p&gt;

&lt;h3&gt;What is the &lt;code&gt;LoaderManager&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Simply stated, the &lt;code&gt;LoaderManager&lt;/code&gt; is responsible for managing one or more &lt;code&gt;Loader&lt;/code&gt;s
associated with an Activity or Fragment. Each Activity and each Fragment has exactly one LoaderManager
instance that is in charge of starting, stopping, retaining, restarting, and destroying its Loaders.
These events are sometimes initiated directly by the client, by calling &lt;code&gt;initLoader()&lt;/code&gt;,
&lt;code&gt;restartLoader()&lt;/code&gt;, or &lt;code&gt;destroyLoader()&lt;/code&gt;. Just as often, however, these events
are triggered by major Activity/Fragment lifecycle events. For example, when an Activity is destroyed,
the Activity instructs its LoaderManager to destroy and close its Loaders (as well as any resources
associated with them, such as a Cursor).&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The LoaderManager does not know how data is loaded, nor does it need to. Rather, the LoaderManager
instructs its Loaders when to start/stop/reset their load, retaining their state across configuration
changes and providing a simple interface for delivering results back to the client. In this way, the
LoaderManager is a much more intelligent and generic implementation of the now-deprecated
&lt;code&gt;startManagingCursor&lt;/code&gt; method. While both manage data across the twists and turns of the
Activity lifecycle, the LoaderManager is far superior for several reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;startManagingCursor&lt;/code&gt; manages Cursors, whereas the LoaderManager manages &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; objects.&lt;/strong&gt;
The advantage here is that &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; is generic, where &lt;code&gt;D&lt;/code&gt; is the container object that holds the
loaded data. In other words, the data source doesn&amp;#39;t have to be a Cursor; it could be a &lt;code&gt;List&lt;/code&gt;, a
&lt;code&gt;JSONArray&lt;/code&gt;... anything. The LoaderManager is independent of the container object that holds the data and is
much more flexible as a result.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;startManagingCursor&lt;/code&gt; will make the Activity call &lt;code&gt;requery()&lt;/code&gt; on the managed cursor.&lt;/strong&gt;
As mentioned in the previous post, &lt;code&gt;requery()&lt;/code&gt; is a potentially expensive operation that is performed on the
main UI thread. Subclasses of the &lt;code&gt;Loader&amp;lt;D&amp;gt;&lt;/code&gt; class, on the other hand, are expected to load their data
asynchronously, so using the LoaderManager will never block the UI thread.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;&lt;code&gt;startManagingCursor&lt;/code&gt; does not retain the Cursor&amp;#39;s state across configuration changes.&lt;/strong&gt;
Instead, each time the Activity is destroyed due to a configuration change (a simple orientation change, for example),
the Cursor is destroyed and must be requeried. The LoaderManager is much more intelligent in that it retains its Loaders&amp;#39;
state across configuration changes, and thus doesn&amp;#39;t need to requery its data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The LoaderManager provides seamless monitoring of data!&lt;/strong&gt; Whenever the Loader&amp;#39;s data source is modified, the LoaderManager
will receive a new asynchronous load from the corresponding Loader, and will return the updated data to the client. (Note: the
LoaderManager will only be notified of these changes if the Loader is implemented correctly. We will discuss how to implement
custom Loaders in &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;part 3&lt;/a&gt; of this series of posts).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you feel overwhelmed by the details above, I wouldn&amp;#39;t stress over it. The most important thing to take away from this is that the
&lt;em&gt;LoaderManager makes your life easy.&lt;/em&gt; It initializes, manages, and destroys Loaders for you, reducing both coding complexity and
subtle lifecycle-related bugs in your Activitys and Fragments. Further, interacting with the LoaderManager involves implementing three
simple callback methods. We discuss the &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;D&amp;gt;&lt;/code&gt; in the next section.&lt;/p&gt;

&lt;h3&gt;Implementing the &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;D&amp;gt;&lt;/code&gt; Interface&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;D&amp;gt;&lt;/code&gt; interface is a simple contract that the &lt;code&gt;LoaderManager&lt;/code&gt;
uses to report data back to the client. Each Loader gets its own callback object that the LoaderManager will interact with.
This callback object fills in the gaps of the abstract &lt;code&gt;LoaderManager&lt;/code&gt; implementation, telling it how to
instantiate the Loader (&lt;code&gt;onCreateLoader&lt;/code&gt;) and providing instructions when its load is complete/reset
(&lt;code&gt;onLoadFinished&lt;/code&gt; and &lt;code&gt;onLoadReset&lt;/code&gt;, respectively). Most often you will implement the callbacks
as part of the component itself, by having your Activity or Fragment implement the &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;D&amp;gt;&lt;/code&gt;
interface:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoaderManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LoaderCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoadFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoaderReset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once instantiated, the client passes the callbacks object (&amp;quot;&lt;code&gt;this&lt;/code&gt;&amp;quot;, in this case) as the
third argument to the LoaderManager&amp;#39;s &lt;code&gt;initLoader&lt;/code&gt; method, and will be bound to the Loader
as soon as it is created.&lt;/p&gt;

&lt;p&gt;Overall, implementing the &lt;a href=&quot;http://developer.android.com/reference/android/app/LoaderManager.LoaderCallbacks.html&quot;&gt;callbacks&lt;/a&gt;
is straightforward. Each callback method serves a specific purpose that makes interacting with the LoaderManager easy:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onCreateLoader&lt;/code&gt; is a factory method that simply returns a new &lt;code&gt;Loader&lt;/code&gt;. The LoaderManager will
call this method when it first creates the Loader.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;onLoadFinished&lt;/code&gt; is called automatically when a Loader has finished its load. This method is typically
where the client will update the application&amp;#39;s UI with the loaded data. The client may (and should) assume that
new data will be returned to this method each time new data is made available. Remember that it is the Loader&amp;#39;s
job to monitor the data source and to perform the actual asynchronous loads. The LoaderManager will receive these
loads once they have completed, and then pass the result to the callback object&amp;#39;s &lt;code&gt;onLoadFinished&lt;/code&gt; method
for the client (i.e. the Activity/Fragment) to use.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lastly, &lt;code&gt;onLoadReset&lt;/code&gt; is called when the Loader&amp;#39;s data is about to be reset. This method gives you the
opportunity to remove any references to old data that may no longer be available.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the next section, we will discuss a commonly asked question from beginning Android developers: how to
transition from outdated managed Cursors to the much more powerful LoaderManager.&lt;/p&gt;

&lt;h3&gt;Transitioning from Managed Cursors to the &lt;code&gt;LoaderManager&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;The code below is similar in behavior to the sample in my &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;previous post&lt;/a&gt;.
The difference, of course, is that it has been updated to use the LoaderManager. The &lt;code&gt;CursorLoader&lt;/code&gt; ensures that all
queries are performed asynchronously, thus guaranteeing that we won&amp;#39;t block the UI thread. Further, the LoaderManager manages
the &lt;code&gt;CursorLoader&lt;/code&gt; across the Activity lifecycle, retaining its data on configuration changes and directing each
new data load to the callback&amp;#39;s &lt;code&gt;onLoadFinished&lt;/code&gt; method, where the Activity is finally free to make use of the
queried Cursor.&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleListActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoaderManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LoaderCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROJECTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text_column&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The loader&amp;#39;s unique id. Loader ids are specific to the Activity or&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Fragment in which they reside.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOADER_ID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The callbacks through which we will interact with the LoaderManager.&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoaderManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LoaderCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// The adapter that binds our data to the ListView&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleCursorAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataColumns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text_column&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewIDs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text_view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Initialize the adapter. Note that we pass a &amp;#39;null&amp;#39; Cursor as the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// third argument. We will pass the adapter a Cursor only when the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// data has finished loading for the first time (i.e. when the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// LoaderManager delivers the data to onLoadFinished). Also note&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// that we have passed the &amp;#39;0&amp;#39; flag as the last argument. This&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// prevents the adapter from registering a ContentObserver for the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Cursor (the CursorLoader will do this for us!).&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleCursorAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataColumns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Associate the (now empty) adapter with the ListView.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// The Activity (which implements the LoaderCallbacks&amp;lt;Cursor&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// interface) is the callbacks object through which we will interact&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// with the LoaderManager. The LoaderManager uses this object to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// instantiate the Loader and to notify the client when data is made&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// available/unavailable.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Initialize the Loader with id &amp;#39;1&amp;#39; and callbacks &amp;#39;mCallbacks&amp;#39;.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// If the loader doesn&amp;#39;t already exist, one is created. Otherwise,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the already created Loader is reused. In either case, the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// LoaderManager will manage the Loader across the Activity/Fragment&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// lifecycle, will receive any new loads once they have completed,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and will report this new data back to the &amp;#39;mCallbacks&amp;#39; object.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LoaderManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getLoaderManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;initLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOADER_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mCallbacks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreateLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Create a new CursorLoader with the following query parameters.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CursorLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SampleListActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONTENT_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROJECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoadFinished&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// A switch-case is useful when dealing with multiple Loaders/IDs&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;LOADER_ID:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// The asynchronous load is complete and the data&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// is now available for use. Only now can we associate&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// the queried Cursor with the SimpleCursorAdapter.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swapCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The listview now displays the queried data.&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLoaderReset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// For whatever reason, the Loader&amp;#39;s data is now unavailable.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Remove any references to the old data by replacing it with&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// a null Cursor.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;swapCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;As its name suggests, the &lt;code&gt;LoaderManager&lt;/code&gt; is responsible for managing &lt;code&gt;Loader&lt;/code&gt;s across the
Activity/Fragment lifecycle. The LoaderManager is simple and its implementation usually requires very little code.
The tricky part is implementing the Loaders, the topic of the next post:
&lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders (part 3)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Leave a comment if you have any questions, or just to let me know if this post helped or not!
Don&amp;#39;t forget to +1 this blog in the top right corner too! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Life Before Loaders (part 1)</title>
   <link href="/2012/07/loaders-and-loadermanager-background.html"/>
   <id>/2012/07/loaders-and-loadermanager-background.html</id>
   <published>2012-07-06T00:00:00-04:00</published>
   <updated>2014-01-18T00:00:00-05:00</updated>
   <summary type="html">&lt;p&gt;This post gives a brief introduction to &lt;code&gt;Loader&lt;/code&gt;s and the &lt;code&gt;LoaderManager&lt;/code&gt;. The first
section describes how data was loaded prior to the release of Android 3.0, pointing out out some of the flaws
of the pre-Honeycomb APIs. The second section defines the purpose of each class and summarizes their powerful
ability in asynchronously loading data.&lt;/p&gt;

&lt;p&gt;This is the first of a series of posts I will be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you know nothing about &lt;code&gt;Loader&lt;/code&gt;s and the &lt;code&gt;LoaderManager&lt;/code&gt;, I strongly recommend you read the
&lt;a href=&quot;http://developer.android.com/guide/components/loaders.html&quot;&gt;documentation&lt;/a&gt; before continuing forward.&lt;/p&gt;

&lt;h3&gt;The Not-So-Distant Past&lt;/h3&gt;

&lt;p&gt;Before Android 3.0, many Android applications lacked in responsiveness. UI interactions glitched, transitions
between activities lagged, and ANR (Application Not Responding) dialogs rendered apps totally useless. This
lack of responsiveness stemmed mostly from the fact that developers were performing queries on the UI
thread&amp;mdash;a very poor choice for lengthy operations like loading data.&lt;/p&gt;

&lt;p&gt;While the &lt;a href=&quot;http://developer.android.com/guide/practices/responsiveness.html&quot;&gt;documentation&lt;/a&gt; has always
stressed the importance of instant feedback, the pre-Honeycomb APIs simply did not encourage this behavior. Before
Loaders, cursors were primarily managed and queried for with two (now deprecated) &lt;code&gt;Activity&lt;/code&gt; methods:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post gives a brief introduction to &lt;code&gt;Loader&lt;/code&gt;s and the &lt;code&gt;LoaderManager&lt;/code&gt;. The first
section describes how data was loaded prior to the release of Android 3.0, pointing out out some of the flaws
of the pre-Honeycomb APIs. The second section defines the purpose of each class and summarizes their powerful
ability in asynchronously loading data.&lt;/p&gt;

&lt;p&gt;This is the first of a series of posts I will be writing on Loaders and the LoaderManager:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Part 1:&lt;/strong&gt; &lt;a href=&quot;/2012/07/loaders-and-loadermanager-background.html&quot;&gt;Life Before Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 2:&lt;/strong&gt; &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 3:&lt;/strong&gt; &lt;a href=&quot;/2012/08/implementing-loaders.html&quot;&gt;Implementing Loaders&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Part 4:&lt;/strong&gt; &lt;a href=&quot;/2012/09/tutorial-loader-loadermanager.html&quot;&gt;Tutorial: AppListLoader&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you know nothing about &lt;code&gt;Loader&lt;/code&gt;s and the &lt;code&gt;LoaderManager&lt;/code&gt;, I strongly recommend you read the
&lt;a href=&quot;http://developer.android.com/guide/components/loaders.html&quot;&gt;documentation&lt;/a&gt; before continuing forward.&lt;/p&gt;

&lt;h3&gt;The Not-So-Distant Past&lt;/h3&gt;

&lt;p&gt;Before Android 3.0, many Android applications lacked in responsiveness. UI interactions glitched, transitions
between activities lagged, and ANR (Application Not Responding) dialogs rendered apps totally useless. This
lack of responsiveness stemmed mostly from the fact that developers were performing queries on the UI
thread&amp;mdash;a very poor choice for lengthy operations like loading data.&lt;/p&gt;

&lt;p&gt;While the &lt;a href=&quot;http://developer.android.com/guide/practices/responsiveness.html&quot;&gt;documentation&lt;/a&gt; has always
stressed the importance of instant feedback, the pre-Honeycomb APIs simply did not encourage this behavior. Before
Loaders, cursors were primarily managed and queried for with two (now deprecated) &lt;code&gt;Activity&lt;/code&gt; methods:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;public void startManagingCursor(Cursor)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Tells the activity to take care of managing the cursor&amp;#39;s lifecycle based on the activity&amp;#39;s lifecycle. The
cursor will automatically be deactivated (&lt;code&gt;deactivate()&lt;/code&gt;) when the activity is stopped, and will
automatically be closed (&lt;code&gt;close()&lt;/code&gt;) when the activity is destroyed. When the activity is stopped
and then later restarted, the Cursor is re-queried (&lt;code&gt;requery()&lt;/code&gt;) for the most up-to-date data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;public Cursor managedQuery(Uri, String, String, String, String)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A wrapper around the &lt;code&gt;ContentResolver&lt;/code&gt;&amp;#39;s &lt;code&gt;query()&lt;/code&gt; method. In addition to performing the
query, it begins management of the cursor (that is, &lt;code&gt;startManagingCursor(cursor)&lt;/code&gt; is called before
it is returned).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While convenient, these methods were deeply flawed in that they performed queries on the UI thread. What&amp;#39;s more,
the &amp;quot;managed cursors&amp;quot; did not retain their data across &lt;code&gt;Activity&lt;/code&gt; configuration changes. The need to
&lt;code&gt;requery()&lt;/code&gt; the cursor&amp;#39;s data in these situations was unnecessary, inefficient, and made orientation
changes clunky and sluggish as a result.&lt;/p&gt;

&lt;h3&gt;The Problem with &amp;quot;Managed &lt;code&gt;Cursor&lt;/code&gt;s&amp;quot;&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s illustrate the problem with &amp;quot;managed cursors&amp;quot; through a simple code sample. Given below is a
&lt;code&gt;ListActivity&lt;/code&gt; that loads data using the pre-Honeycomb APIs. The activity makes a query
to the &lt;code&gt;ContentProvider&lt;/code&gt; and begins management of the returned cursor. The results are then bound to
a &lt;code&gt;SimpleCursorAdapter&lt;/code&gt;, and are displayed on the screen in a &lt;code&gt;ListView&lt;/code&gt;. The code has
been condensed for simplicity.&lt;/p&gt;

&lt;div class=&quot;scrollable&quot;&gt;

&lt;table class=&quot;highlighttable&quot;&gt;&lt;tr&gt;&lt;td class=&quot;linenos&quot;&gt;&lt;div class=&quot;linenodiv&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleListActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ListActivity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROJECTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text_column&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Performs a &amp;quot;managed query&amp;quot; to the ContentProvider. The Activity &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// will handle closing and requerying the cursor.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WARNING!! This query (and any subsequent re-queries) will be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// performed on the UI Thread!!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cursor&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;managedQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CONTENT_URI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// The Uri constant in your ContentProvider class&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PROJECTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// The columns to return for each data row&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// No where clause&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// No where clause&lt;/span&gt;
        &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// No sort order&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataColumns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text_column&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewIDs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;text_view&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
 
    &lt;span class=&quot;c1&quot;&gt;// Create the backing adapter for the ListView.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// WARNING!! While not readily obvious, using this constructor will &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// tell the CursorAdapter to register a ContentObserver that will&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// monitor the underlying data source. As part of the monitoring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// process, the ContentObserver will call requery() on the cursor &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// each time the data is updated. Since Cursor#requery() is performed &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// on the UI thread, this constructor should be avoided at all costs!&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;SimpleCursorAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SimpleCursorAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;// The Activity context&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;list_item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Points to the XML for a list item&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;// Cursor that contains the data to display&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dataColumns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// Bind the data in column &amp;quot;text_column&amp;quot;...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewIDs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;// ...to the TextView with id &amp;quot;R.id.text_view&amp;quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Sets the ListView&amp;#39;s adapter to be the cursor adapter that was &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// just created.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setListAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;/div&gt;

&lt;p&gt;There are three problems with the code above. If you have understood this post so far, the first two
shouldn&amp;#39;t be difficult to spot:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;managedQuery&lt;/code&gt; performs a query on the main UI thread. This leads to unresponsive apps and
 should no longer be used.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As seen in the &lt;code&gt;Activity.java&lt;/code&gt;
 &lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/1.5_r4/android/app/Activity.java#Activity.managedQuery%28android.net.Uri%2Cjava.lang.String%5B%5D%2Cjava.lang.String%2Cjava.lang.String%29&quot;&gt;source code&lt;/a&gt;,
 the call to &lt;code&gt;managedQuery&lt;/code&gt; begins management of the returned cursor with a call to
 &lt;code&gt;startManagingCursor(cursor)&lt;/code&gt;. Having the activity manage the cursor seems convenient at first, as we
 no longer need to worry about deactivating/closing the cursor ourselves. However, this signals the activity to call
 &lt;code&gt;requery()&lt;/code&gt; on the cursor
 &lt;a href=&quot;http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/1.5_r4/android/app/Activity.java#3503&quot;&gt;each time the activity returns from a stopped state&lt;/a&gt;,
 and therefore puts the UI thread at risk. This cost significantly outweighs the convenience of having the activity deactivate/close the cursor for us.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;SimpleCursorAdapter&lt;/code&gt; constructor (line 32) is deprecated and should not be used. The
 problem with this constructor is that it will have the &lt;code&gt;SimpleCursorAdapter&lt;/code&gt; auto-requery
 its data when changes are made. More specifically, the CursorAdapter will register a ContentObserver
 that monitors the underlying data source for changes, calling &lt;code&gt;requery()&lt;/code&gt; on its bound
 cursor each time the data is modified. The
 &lt;a href=&quot;http://developer.android.com/reference/android/widget/SimpleCursorAdapter.html#SimpleCursorAdapter(android.content.Context, int, android.database.Cursor, java.lang.String[], int[], int)&quot;&gt;standard constructor&lt;/a&gt;
 should be used instead (if you intend on loading the adapter&amp;#39;s data with a &lt;code&gt;CursorLoader&lt;/code&gt;,
 make sure you pass &lt;code&gt;0&lt;/code&gt; as the last argument). Don&amp;#39;t worry if you couldn&amp;#39;t spot this one...
 it&amp;#39;s a very subtle bug.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With the first Android tablet about to be released, something had to be done to encourage UI-friendly development.
The larger, 7-10&amp;quot; Honeycomb tablets called for more complicated, interactive, multi-paned layouts. Further, the
introduction of the &lt;code&gt;Fragment&lt;/code&gt; meant that applications were about to become more dynamic and event-driven.
A simple, single-threaded approach to loading data could no longer be encouraged. Thus, the &lt;code&gt;Loader&lt;/code&gt; and
the &lt;code&gt;LoaderManager&lt;/code&gt; were born.&lt;/p&gt;

&lt;h3&gt;Android 3.0, Loaders, and the LoaderManager&lt;/h3&gt;

&lt;p&gt;Prior to Honeycomb, it was difficult to manage cursors, synchronize correctly with the UI thread, and ensure
all queries occurred on a background thread. Android 3.0 introduced the &lt;code&gt;Loader&lt;/code&gt; and &lt;code&gt;LoaderManager&lt;/code&gt; classes
to help simplify the process. Both classes are available for use in the Android Support Library, which
supports all Android platforms back to Android 1.6.&lt;/p&gt;

&lt;p&gt;The new &lt;code&gt;Loader&lt;/code&gt; API is a huge step forward, and significantly improves the user experience. &lt;code&gt;Loader&lt;/code&gt;s ensure
that all cursor operations are done asynchronously, thus eliminating the possibility of blocking the UI thread.
Further, when managed by the &lt;code&gt;LoaderManager&lt;/code&gt;, &lt;code&gt;Loader&lt;/code&gt;s retain their existing cursor data across the activity
instance (for example, when it is restarted due to a configuration change), thus saving the cursor from
unnecessary, potentially expensive re-queries. As an added bonus, &lt;code&gt;Loader&lt;/code&gt;s are intelligent enough to monitor
the underlying data source for updates, re-querying automatically when the data is changed.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Since the introduction of &lt;code&gt;Loader&lt;/code&gt;s in Honeycomb and Compatibility Library, Android applications have
changed for the better. Making use of the now deprecated &lt;code&gt;startManagingCursor&lt;/code&gt; and &lt;code&gt;managedQuery&lt;/code&gt;
methods are extremely discouraged; not only do they slow down your app, but they can potentially bring it to a
screeching halt. &lt;code&gt;Loader&lt;/code&gt;s, on the other hand, significantly speed up the user experience by offloading
the work to a separate background thread.&lt;/p&gt;

&lt;p&gt;In the next post (titled &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;Understanding the LoaderManager&lt;/a&gt;),
we will go more in-depth on how to fix these problems by completing the transition from &amp;quot;managed cursors&amp;quot; to
making use of &lt;code&gt;Loader&lt;/code&gt;s and the &lt;code&gt;LoaderManager&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;#39;t forget to +1 this blog in the top right corner if you found this helpful!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Content Providers &amp; Content Resolvers</title>
   <link href="/2012/06/content-resolvers-and-content-providers.html"/>
   <id>/2012/06/content-resolvers-and-content-providers.html</id>
   <published>2012-06-25T00:00:00-04:00</published>
   <updated>2012-06-25T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;Content Providers and Content Resolvers are a common source of confusion for beginning
Android developers. Further, online tutorials and sample code are not sufficient in
describing how the two classes work together to provide access to the Android data
model. This post hopes to fill in this gap by explaining their place in the
&lt;code&gt;android.content&lt;/code&gt; package. It concludes with a walk through the life of a
simple query to the Content Resolver.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;Content Providers and Content Resolvers are a common source of confusion for beginning
Android developers. Further, online tutorials and sample code are not sufficient in
describing how the two classes work together to provide access to the Android data
model. This post hopes to fill in this gap by explaining their place in the
&lt;code&gt;android.content&lt;/code&gt; package. It concludes with a walk through the life of a
simple query to the Content Resolver.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;The &lt;code&gt;android.content&lt;/code&gt; Package&lt;/h3&gt;

&lt;p&gt;The &lt;a href=&quot;http://developer.android.com/reference/android/content/package-summary.html&quot;&gt;&lt;code&gt;android.content&lt;/code&gt;&lt;/a&gt;
package contains classes for accessing and publishing data. The Android framework
enforces a &lt;strong&gt;robust&lt;/strong&gt; and &lt;strong&gt;secure&lt;/strong&gt; data sharing model. Applications are &lt;em&gt;not&lt;/em&gt;
allowed direct access to other application&amp;#39;s internal data. Two classes in the
package help enforce this requirement: the &lt;code&gt;ContentResolver&lt;/code&gt; and the &lt;code&gt;ContentProvider&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;What is the Content Resolver?&lt;/h3&gt;

&lt;p&gt;The Content Resolver is the single, global instance in your application that provides
access to your (and other applications&amp;#39;) content providers. The Content Resolver
behaves exactly as its name implies: it accepts requests from clients, and &lt;em&gt;resolves&lt;/em&gt;
these requests by directing them to the content provider with a distinct authority.
To do this, the Content Resolver stores a mapping from authorities to Content Providers.
This design is important, as it allows a simple and secure means of accessing other
applications&amp;#39; Content Providers.&lt;/p&gt;

&lt;p&gt;The Content Resolver includes the CRUD (create, read, update, delete) methods corresponding
to the abstract methods (insert, delete, query, update) in the Content Provider class.
The Content Resolver does not know the implementation of the Content Providers it is
interacting with (nor does it need to know); each method is passed an URI that specifies
the Content Provider to interact with.&lt;/p&gt;

&lt;h3&gt;What is a Content Provider?&lt;/h3&gt;

&lt;p&gt;Whereas the Content Resolver provides an abstraction from the application&amp;#39;s Content Providers,
Content Providers provides an abstraction from the underlying data source
(i.e. a SQLite database). They provide mechanisms for defining data security (i.e. by
enforcing read/write permissions) and offer a standard interface that connects data
in one process with code running in another process.&lt;/p&gt;

&lt;p&gt;Content Providers provide an interface for publishing and consuming data, based around a
simple URI addressing model using the &lt;code&gt;content://&lt;/code&gt; schema. They enable you to decouple
your application layers from the underlying data layers, making your application
data-source agnostic by abstracting the underlying data source.&lt;/p&gt;

&lt;h3&gt;The Life of a Query&lt;/h3&gt;

&lt;p&gt;So what exactly is the step-by-step process behind a simple query? As described above,
when you query data from your database via the content provider, you don&amp;#39;t communicate
with the provider directly. Instead, you use the Content Resolver object to communicate
with the provider. The specific sequence of events that occurs when a query is made
is given below:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;A call to &lt;code&gt;getContentResolver().query(Uri, String, String, String, String)&lt;/code&gt; is made. 
 The call invokes the Content Resolver&amp;#39;s &lt;code&gt;query&lt;/code&gt; method, &lt;em&gt;not&lt;/em&gt; the &lt;code&gt;ContentProvider&lt;/code&gt;&amp;#39;s.&lt;/li&gt;
&lt;li&gt;When the &lt;code&gt;query&lt;/code&gt; method is invoked, the Content Resolver parses the &lt;code&gt;uri&lt;/code&gt; argument 
 and extracts its authority.&lt;/li&gt;
&lt;li&gt;The Content Resolver directs the request to the content provider registered with the
 (unique) authority. This is done by calling the Content Provider&amp;#39;s &lt;code&gt;query&lt;/code&gt; method.&lt;/li&gt;
&lt;li&gt;When the Content Provider&amp;#39;s &lt;code&gt;query&lt;/code&gt; method is invoked, the query is performed and
 a Cursor is returned (or an exception is thrown). The resulting behavior depends
 entirely on the Content Provider&amp;#39;s implementation.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;An integral part of the 
&lt;a href=&quot;http://developer.android.com/reference/android/content/package-summary.html&quot;&gt;&lt;code&gt;android.content&lt;/code&gt;&lt;/a&gt;
package, the &lt;code&gt;ContentResolver&lt;/code&gt; and &lt;code&gt;ContentProvider&lt;/code&gt; classes work together to
ensure secure access to other applications&amp;#39; data. Understanding how the underlying
system works becomes second nature once you&amp;#39;ve written enough Android code, but I
hope that someone finds this explanation helpful some day.&lt;/p&gt;

&lt;p&gt;Let me know if you have any questions about the process!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Why Ice Cream Sandwich Crashes your App</title>
   <link href="/2012/06/app-force-close-honeycomb-ics.html"/>
   <id>/2012/06/app-force-close-honeycomb-ics.html</id>
   <published>2012-06-18T00:00:00-04:00</published>
   <updated>2012-06-18T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;The following question has plagued StackOverflow ever since Ice Cream
Sandwich&amp;#39;s initial release:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My application works fine on devices running Android 2.x, but
force closes on devices running Honeycomb (3.x) and Ice Cream
Sandwich (4.x). Why does this occur?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a great question; after all, newer versions of Android are
released with the expectation that old apps will remain compatible
with new devices. In my experience, there are a couple reasons why
this might occur. Most of the time, however, the reason is simple:
&lt;em&gt;you are performing a potentially expensive operation on the UI
thread&lt;/em&gt;.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;The following question has plagued StackOverflow ever since Ice Cream
Sandwich&amp;#39;s initial release:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My application works fine on devices running Android 2.x, but
force closes on devices running Honeycomb (3.x) and Ice Cream
Sandwich (4.x). Why does this occur?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is a great question; after all, newer versions of Android are
released with the expectation that old apps will remain compatible
with new devices. In my experience, there are a couple reasons why
this might occur. Most of the time, however, the reason is simple:
&lt;em&gt;you are performing a potentially expensive operation on the UI
thread&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;What is the UI Thread?&lt;/h3&gt;

&lt;p&gt;The concept and importance of the  application&amp;#39;s &lt;strong&gt;main UI thread&lt;/strong&gt;
is something every Android developer should understand. Each time an
application is launched, the system creates a thread called &amp;quot;main&amp;quot;
for the application. The main thread (also known as the &amp;quot;UI thread&amp;quot;)
is in charge of dispatching events to the appropriate views/widgets
and thus is very important. It&amp;#39;s also the thread where your application
interacts with running components of your application&amp;#39;s UI. For instance,
if you touch a button on the screen, the UI thread dispatches the touch
event to the view, which then sets its pressed state and posts an invalidate
request to the event queue. The UI thread dequeues this request and then
tells the view to redraw itself.&lt;/p&gt;

&lt;p&gt;This single-thread model can yield poor performance unless Android
applications are implemented properly. Specifically, if the UI thread
was in charge of running everything in your entire application,
performing long operations such as network access or database queries
on the UI thread would block the entire user interface. No event would
be able to be dispatched&amp;mdash;including drawing and touchscreen
events&amp;mdash;while the long operation is underway. From the user&amp;#39;s
perspective, the application will appear to be frozen.&lt;/p&gt;

&lt;p&gt;In these situations, instant feedback is vital. Studies show that
&lt;strong&gt;0.1 seconds&lt;/strong&gt; is about the limit for having the user feel that
the system is reacting instantaneously. Anything slower than this
limit will probably be considered as &lt;strong&gt;lag&lt;/strong&gt;
(&lt;a href=&quot;http://www.useit.com/papers/responsetime.html&quot;&gt;Miller 1968; Card et al. 1991&lt;/a&gt;).
While a fraction of a second might not seem harmful, even a tenth
of a second can be the difference between a good review and a bad
review on Google Play. Even worse, if the UI thread is blocked
for more than about five seconds, the user is presented with the
notorious &amp;quot;application not responding&amp;quot; (ANR) dialog and the app is
force closed.&lt;/p&gt;

&lt;h3&gt;Why Android Crashes Your App&lt;/h3&gt;

&lt;p&gt;The reason why your application crashes on Android versions 3.0 and above,
but works fine on Android 2.x is because &lt;strong&gt;Honeycomb and Ice Cream Sandwich
are much stricter about abuse against the UI Thread&lt;/strong&gt;. For example, when
an Android device running HoneyComb or above detects a network access on
the UI thread, a &lt;code&gt;NetworkOnMainThreadException&lt;/code&gt; will be thrown:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;E/AndroidRuntime(673): java.lang.RuntimeException: Unable to start activity
    ComponentInfo{com.example/com.example.ExampleActivity}: android.os.NetworkOnMainThreadException
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The explanation as to why this occurs is well documented on the Android
developer&amp;#39;s site:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;NetworkOnMainThreadException&lt;/code&gt; is thrown when an application
attempts to perform a networking operation on its main thread. This is
only thrown for applications targeting the Honeycomb SDK or higher.
Applications targeting earlier SDK versions are allowed to do networking
on their main event loop threads, but it&amp;#39;s heavily discouraged.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some examples of other operations that ICS and Honeycomb &lt;em&gt;won&amp;#39;t&lt;/em&gt; allow
you to perform on the UI thread are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Opening a &lt;code&gt;Socket&lt;/code&gt; connection (i.e. &lt;code&gt;new Socket()&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;HTTP requests (i.e. &lt;code&gt;HTTPClient&lt;/code&gt; and &lt;code&gt;HTTPUrlConnection&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Attempting to connect to a remote MySQL database.&lt;/li&gt;
&lt;li&gt;Downloading a file (i.e. &lt;code&gt;Downloader.downloadFile()&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are attempting to perform any of these operations on the UI thread, you
&lt;em&gt;must&lt;/em&gt; wrap them in a worker thread. The easiest way to do this is to use
of an &lt;code&gt;AsyncTask&lt;/code&gt;, which allows you to perform asynchronous work on
your user interface. An &lt;code&gt;AsyncTask&lt;/code&gt; will perform the blocking operations
in a worker thread and will publish the results on the UI thread, without
requiring you to handle threads and/or handlers yourself.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;The reason why I decided to write about this topic is because I have seen it
come up on StackOverflow and other forums countless times. The majority of
the time the error stems from placing expensive operations directly on the UI
thread. To ensure you don&amp;#39;t disrupt the user experience, it is very important
to execute Socket connections, HTTP requests, file downloads, and other
long-term operations on a separate Thread. The easiest way to do this is
to wrap your operation in an AsyncTask, which launches a new thread and
allows you to perform asynchronous work on your user interface.&lt;/p&gt;

&lt;p&gt;As always, let me know if this was helpful by +1-ing the post or leaving a
comment below! Feel free to ask questions too... I respond to them quickly. :)&lt;/p&gt;

&lt;h3&gt;Helpful Links&lt;/h3&gt;

&lt;p&gt;Here are some helpful links that might help you get started with &lt;code&gt;AsyncTask&lt;/code&gt;s:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/reference/android/os/AsyncTask.html&quot;&gt;&lt;code&gt;AsyncTask&lt;/code&gt;&lt;/a&gt; documentation&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://android-developers.blogspot.com/2010/07/multithreading-for-performance.html&quot;&gt;Multithreading For Performance&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Ensuring Compatibility with a Utility Class</title>
   <link href="/2012/06/compatability-manager-utility-class.html"/>
   <id>/2012/06/compatability-manager-utility-class.html</id>
   <published>2012-06-14T00:00:00-04:00</published>
   <updated>2012-06-14T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;This post introduces the concept of a &lt;strong&gt;utility class&lt;/strong&gt; and gives a simple
example of how you can use one to tidy up your code. As Android projects grow in size, it
becomes increasingly important that your code remains organized and well-structured.
Providing a utility class for commonly called methods can help tremendously in reducing
the complexity of your project, allowing you to structure your code in a readable and
easily understandable way.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;This post introduces the concept of a &lt;strong&gt;utility class&lt;/strong&gt; and gives a simple
example of how you can use one to tidy up your code. As Android projects grow in size, it
becomes increasingly important that your code remains organized and well-structured.
Providing a utility class for commonly called methods can help tremendously in reducing
the complexity of your project, allowing you to structure your code in a readable and
easily understandable way.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here&amp;#39;s a simple example. Let&amp;#39;s say you are building an Android application that frequently
checks the device&amp;#39;s SDK version code, to ensure backward compatibility. You&amp;#39;ll need to
use the constants provided in the &lt;code&gt;android.os.Build.VERSION_CODES&lt;/code&gt; class,
but these constants are long and can quickly clutter up your code. In this case,
it might be a good idea to create a &lt;code&gt;CompatabilityUtil&lt;/code&gt; utility class.
A sample implementation is given below:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CompatibilityUtil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/** Get the current Android API level. */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SDK_INT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/** Determine if the device is running API level 8 or higher. */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isFroyo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FROYO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/** Determine if the device is running API level 11 or higher. */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isHoneycomb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getSdkVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HONEYCOMB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Determine if the device is a tablet (i.e. it has a large screen).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * @param context The calling context.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isTablet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;screenLayout&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREENLAYOUT_SIZE_MASK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SCREENLAYOUT_SIZE_LARGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Determine if the device is a HoneyComb tablet.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * @param context The calling context.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isHoneycombTablet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isHoneycomb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isTablet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/** This class can&amp;#39;t be instantiated. */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CompatibilityUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Developers often create a separate package called &lt;code&gt;[package name].util&lt;/code&gt; for
frequently used utility classes. So for example, if your package name is &lt;code&gt;com.example.myapp&lt;/code&gt;,
then a nice place to put your utility classes would be in a separate package called
&lt;code&gt;com.example.myapp.util&lt;/code&gt;. However, remember that there&amp;#39;s no need to &lt;em&gt;over-organize&lt;/em&gt;
your project. Creating a separate package might be a good idea for a larger project,
but is completely unnecessary if your project contains only 5-10 classes. I might
write a post about package/class organization in the future. For now, check out the
(very well-designed) &lt;a href=&quot;http://code.google.com/p/iosched/source/browse/&quot;&gt;Google I/O 2011&lt;/a&gt;
app&amp;#39;s source code. You will learn a lot!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Designing for Backwards Compatibility</title>
   <link href="/2012/06/designing-for-backwards-compatibility.html"/>
   <id>/2012/06/designing-for-backwards-compatibility.html</id>
   <published>2012-06-13T00:00:00-04:00</published>
   <updated>2012-06-13T00:00:00-04:00</updated>
   <summary type="html">&lt;blockquote&gt;
&lt;p&gt;Note: please read this &lt;a href=&quot;/2012/06/compatability-manager-utility-class.html&quot;&gt;short post&lt;/a&gt;
before continuing forward.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common issue in Android development is backwards compatibility. How can we add cool
new features from the most recent Android API while still ensuring that it runs
correctly on devices running older versions of Android? This post discusses the
problem by means of a simple example, and proposes a scalable, well-designed solution.&lt;/p&gt;
</summary>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;Note: please read this &lt;a href=&quot;/2012/06/compatability-manager-utility-class.html&quot;&gt;short post&lt;/a&gt;
before continuing forward.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A common issue in Android development is backwards compatibility. How can we add cool
new features from the most recent Android API while still ensuring that it runs
correctly on devices running older versions of Android? This post discusses the
problem by means of a simple example, and proposes a scalable, well-designed solution.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3&gt;The Problem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s say we are writing an application that reads and writes pictures to new albums
(i.e. folders) located on external storage, and that we want our application to support
all devices running Donut (Android 1.6, SDK version 4) and above. Upon consulting the
&lt;a href=&quot;http://developer.android.com/guide/topics/data/data-storage.html#filesExternal&quot;&gt;documentation&lt;/a&gt;,
we realize there is a slight problem. With the introduction of Froyo (Android 2.2,
SDK version 8) came a somewhat radical change in how external storage was laid out
and represented on Android devices, as well as several new API methods (see
&lt;a href=&quot;http://developer.android.com/reference/android/os/Environment.html&quot;&gt;android.os.Environment&lt;/a&gt;)
that allow us access to the public storage directories. To ensure backwards compatibility
all the way back to Donut, we must provide two separate implementations: one for older,
pre-Froyo devices, and another for devices running Froyo and above.&lt;/p&gt;

&lt;h3&gt;Setting up the Manifest&lt;/h3&gt;

&lt;p&gt;Before we dive into the implementation, we will first update our &lt;code&gt;uses-sdk&lt;/code&gt; tag in the Android
manifest. There are two attributes we must set,&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;android:minSdkVersion=&amp;quot;4&amp;quot;&lt;/code&gt;. This attribute defines a minimum API level required for
the application to run. We want our application to run on devices running Donut and above,
so we set its value to &lt;code&gt;&amp;quot;4&amp;quot;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;android:targetSdkVersion=&amp;quot;15&amp;quot;&lt;/code&gt;. This attribute is a little trickier to understand
(and is incorrectly defined on blogs all over the internet). This attribute specifies
the API level on which the application is designed to run. Preferably we would want
its value to correspond to the most recently released SDK (&lt;code&gt;&amp;quot;15&amp;quot;&lt;/code&gt;, at the time of this
posting). Strictly speaking, however, its value should be given by the largest SDK
version number that we have tested your application against (we will assume we have
done so for the remainder of this example).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The resulting tag in our manifest is as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;&amp;lt;uses-sdk 
    android:minSdkVersion=&amp;quot;4&amp;quot;
    android:targetSdkVersion=&amp;quot;15&amp;quot; &amp;gt;
&amp;lt;/uses-sdk&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;

&lt;p&gt;Our implementation will consist of an abstract class and two subclasses that extend
it. The abstract &lt;code&gt;AlbumStorageDirFactory&lt;/code&gt; class enforces a simple contract by
requiring its subclasses to implement the &lt;code&gt;getAlbumStorageDir&lt;/code&gt; method. The actual
implementation of this method depends on the device&amp;#39;s SDK version number. Specifically,
if we are using a device running Froyo or above, its implementation will make use of
new methods introduced in API level 8. Otherwise, the correct directory must be
determined using pre-Froyo method calls, to ensure that our app remains backwards compatible.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AlbumStorageDirFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Returns a File object that points to the folder that will store &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * the album&amp;#39;s pictures. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAlbumStorageDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * A static factory method that returns a new AlbumStorageDirFactory &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * instance based on the current device&amp;#39;s SDK version.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlbumStorageDirFactory&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Note: the CompatibilityUtil class is implemented &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and discussed in a previous post, entitled &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &amp;quot;Ensuring Compatibility with a Utility Class&amp;quot;.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CompatabilityUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isFroyo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FroyoAlbumDirFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;BaseAlbumDirFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two subclasses and their implementation are given below.The class also provides
a static factory &lt;code&gt;newInstance&lt;/code&gt; method (note that this method makes use of the
&lt;code&gt;CompatabilityUtil&lt;/code&gt; utility class, which was both implemented and discussed in a
&lt;a href=&quot;/2012/06/compatability-manager-utility-class.html&quot;&gt;previous post&lt;/a&gt;).
We discuss this method in detail in the next section.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;BaseAlbumDirFactory&lt;/code&gt; subclass handles pre-Froyo SDK versions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseAlbumDirFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlbumStorageDirFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * For pre-Froyo devices, we must provide the name of the photo directory &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * ourselves. We choose &amp;quot;/dcim/&amp;quot; as it is the widely considered to be the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * standard storage location for digital camera files.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAMERA_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/dcim/&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAlbumStorageDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExternalStorageDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 
            &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAMERA_DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;FroyoAlbumDirFactory&lt;/code&gt; subclass handles Froyo and above:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FroyoAlbumDirFactory&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlbumStorageDirFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAlbumStorageDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExternalStoragePublicDirectory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;DIRECTORY_PICTURES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Making Sense of the Pattern&lt;/h3&gt;

&lt;p&gt;Take a second to study the structure of the code above. Our implementation ensures
compatibility with pre-Froyo devices through a simple design. To ensure compatibility,
we simply request a new &lt;code&gt;AlbumStorageDirFactory&lt;/code&gt; and call the abstract &lt;code&gt;getAlbumStorageDir&lt;/code&gt;
method. The subclass is determined and instantiated at runtime depending on the Android
device&amp;#39;s SDK version number. See the sample activity below for an example on how an ordinary
Activity might use this pattern to retrieve an album&amp;#39;s directory.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlbumStorageDirFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAlbumFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Instantiate the AlbumStorageDirFactory. Instead of&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// invoking the subclass&amp;#39; default constructors directly,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// we make use of the Abstract Factory design pattern,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// which encapsulates the inner details. As a result, the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Activity does not need to know `anything` about the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// compatibility-specific implementation--all of this is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// done behind the scenes within the &amp;quot;mAlbumFactory&amp;quot; object.     &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mAlbumFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AlbumStorageDirFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// get the album&amp;#39;s directory&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampleAlbumDir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAlbumDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sample_album&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * A simple helper method that returns a File corresponding&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * to the album named &amp;quot;albumName&amp;quot;. The helper method invokes&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * the abstract &amp;quot;getAlbumStorageDir&amp;quot; method, which will return&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * correct location of the directory depending on the subclass&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * that was returned in &amp;quot;newInstance&amp;quot; (which depends entirely&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * on the device&amp;#39;s SDK version number).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAlbumDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mAlbumStorageDirFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAlbumStorageDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;albumName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are a couple benefits to organizing the code the way we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It&amp;#39;s easily extendable.&lt;/strong&gt; While there is certainly no need to separate our
implementations into classes for simple examples (such as the one discussed above),
doing so is important when working with large, complicated projects, as it will ensure
changes can quickly be made down the line.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It encapsulates the implementation-specific details.&lt;/strong&gt; Abstracting these details
from the client makes our code less cluttered and easier to read (note: in this case,
&amp;quot;the client&amp;quot; was the person who wrote the Activity class).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Android developers constantly write code to ensure backwards compatibility. As projects
expand and applications become more complex, it becomes increasingly important to ensure
your implementation is properly designed. Hopefully this post helped and will encourage
you to more elegant solutions in the future!&lt;/p&gt;

&lt;p&gt;Leave a comment if you have any questions or criticisms... or just to let me know that
you managed to read through this entire post!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Basic Android Debugging with Logs</title>
   <link href="/2012/05/intro-to-android-debug-logging.html"/>
   <id>/2012/05/intro-to-android-debug-logging.html</id>
   <published>2012-05-30T00:00:00-04:00</published>
   <updated>2012-05-30T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;As with most areas in software engineering, debugging is a crucial aspect
of Android development. Properly setting up your application for debugging
can save you hours of work and frustration. Unfortunately, in my experience
not many beginners learn how to properly make use of the utility classes
provided in the Android SDK. Unless you are an experienced developer, it
is my personal belief that Android debugging should follow a &lt;em&gt;pattern&lt;/em&gt;.
This will prove beneficial for a couple reasons:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;As with most areas in software engineering, debugging is a crucial aspect
of Android development. Properly setting up your application for debugging
can save you hours of work and frustration. Unfortunately, in my experience
not many beginners learn how to properly make use of the utility classes
provided in the Android SDK. Unless you are an experienced developer, it
is my personal belief that Android debugging should follow a &lt;em&gt;pattern&lt;/em&gt;.
This will prove beneficial for a couple reasons:&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It allows you to anticipate bugs down the line.&lt;/strong&gt; Setting up your development
work space for debugging will give you a head start on bugs you might encounter
in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It gives you centralized control over the debugging process.&lt;/strong&gt; Disorganized and
sparse placement of log messages in your class can clutter your logcat output, making
it difficult to interpret debugging results. The ability to toggle certain groups
of log messages on/off can make your life a whole lot easier, especially if your
application is complex.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;The &lt;code&gt;Log&lt;/code&gt; Class&lt;/h3&gt;

&lt;p&gt;For those of you who don&amp;#39;t know, the Android SDK includes a useful logging
utility class called &lt;code&gt;android.util.Log&lt;/code&gt;. The class allows you to
log messages categorized based severity; each type of logging message has
its own message. Here is a listing of the message types, and their respective
method calls, ordered from lowest to highest priority:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Log.v()&lt;/code&gt; method is used to log verbose messages.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Log.d()&lt;/code&gt; method is used to log debug messages.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Log.i()&lt;/code&gt; method is used to log informational messages.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Log.w()&lt;/code&gt; method is used to log warnings.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Log.e()&lt;/code&gt; method is used to log errors.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Log.wtf()&lt;/code&gt; method is used to log events that should never happen
(&amp;quot;wtf&amp;quot; being an abbreviation for &amp;quot;What a Terrible Failure&amp;quot;, of course).
You can think of this method as the equivalent of Java&amp;#39;s &lt;code&gt;assert&lt;/code&gt; method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One should &lt;em&gt;always&lt;/em&gt; consider a message&amp;#39;s type when assigning log messages to
one of the six method calls, as this will allow you to
&lt;a href=&quot;http://developer.android.com/guide/developing/debugging/debugging-log.html#filteringOutput&quot;&gt;filter your logcat output&lt;/a&gt;
when appropriate. It is also important to understand when it is acceptable to
compile log messages into your application:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Verbose logs should never be compiled into an application except during development.&lt;/strong&gt; 
When development is complete and you are ready to release your application to the world,
you should remove all verbose method calls either by commenting them out, or using
ProGuard to remove any verbose log statements directly from the bytecode of your
compiled JAR executable, as described in Christopher&amp;#39;s answer in this
&lt;a href=&quot;http://stackoverflow.com/q/2018263/844882&quot;&gt;StackOverflow post&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Debug logs&lt;/strong&gt; are compiled in but are ignored at runtime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Error&lt;/strong&gt;, &lt;strong&gt;warning&lt;/strong&gt;, and &lt;strong&gt;informational&lt;/strong&gt; logs are always kept.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;A Simple Pattern&lt;/h3&gt;

&lt;p&gt;A simple way to organize debugging is with the sample pattern implemented
below. A global, static string is given to represent the specific class
(an Activity in this example, but it could be a service, an adapter,
anything), and a boolean variable to represent whether or not log
messages should be printed to the logcat.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * A string constant to use in calls to the &amp;quot;log&amp;quot; methods. Its&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * value is often given by the name of the class, as this will &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * allow you to easily determine where log methods are coming&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * from when you analyze your logcat output.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;SampleActivity&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Toggle this boolean constant&amp;#39;s value to turn on/off logging&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * within the class. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VERBOSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;+++ ON CREATE +++&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;++ ON START ++&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onResume&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VERBOSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;+ ON RESUME +&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Don&amp;#39;t be afraid to be creative in how you print your log messages to the logcat!
For instance, when the sample activity above is launched, the resulting logcat
is presented in an nicely formatted and human-readable way:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;V SampleActivity +++ ON CREATE +++
V SampleActivity ++ ON START++
V SampleActivity + ON RESUME +
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;In this post, I have covered the basics in which Android debugging can (and
should) be performed. In a future post, I will go into a bit more depth by
providing some more advanced patterns that will give you more control over
how debugging is performed at runtime.&lt;/p&gt;

&lt;p&gt;Leave a comment if this helped... it&amp;#39;ll motivate me to write more of these
blog posts in the future! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Reaping the Benefits of the LoaderManager</title>
   <link href="/2012/05/why-you-should-use-loadermanager.html"/>
   <id>/2012/05/why-you-should-use-loadermanager.html</id>
   <published>2012-05-26T00:00:00-04:00</published>
   <updated>2012-05-26T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;With Android 3.0 came the introduction of the &lt;code&gt;LoaderManager&lt;/code&gt; class, an abstract
class associated with an &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Fragment&lt;/code&gt; for managing one or
more &lt;code&gt;Loader&lt;/code&gt; instances. The &lt;code&gt;LoaderManager&lt;/code&gt; class is one of my favorite
additions to the Android framework for a number of reasons, but mostly because it &lt;em&gt;significantly&lt;/em&gt;
reduces code complexity and makes your application run a lot smoother. Implementing data loaders
with the &lt;code&gt;LoaderManager&lt;/code&gt; is simple to implement, and takes care of everything about
lifecycle management so are much less error prone.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;With Android 3.0 came the introduction of the &lt;code&gt;LoaderManager&lt;/code&gt; class, an abstract
class associated with an &lt;code&gt;Activity&lt;/code&gt; or &lt;code&gt;Fragment&lt;/code&gt; for managing one or
more &lt;code&gt;Loader&lt;/code&gt; instances. The &lt;code&gt;LoaderManager&lt;/code&gt; class is one of my favorite
additions to the Android framework for a number of reasons, but mostly because it &lt;em&gt;significantly&lt;/em&gt;
reduces code complexity and makes your application run a lot smoother. Implementing data loaders
with the &lt;code&gt;LoaderManager&lt;/code&gt; is simple to implement, and takes care of everything about
lifecycle management so are much less error prone.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;While applications are free to write their own loaders for loading various types of data, the
most common (and simplest) use of the &lt;code&gt;LoaderManager&lt;/code&gt; is with a &lt;code&gt;CursorLoader&lt;/code&gt;.
When done correctly, the &lt;code&gt;CursorLoader&lt;/code&gt; class offloads the work of loading data on a thread,
and keeps the data persistent during short term activity refresh events, such as an orientation change.
In addition to performing the initial query, the &lt;code&gt;CursorLoader&lt;/code&gt; registers a
&lt;code&gt;ContentObserver&lt;/code&gt; with the dataset you requested and calls &lt;code&gt;forceLoad()&lt;/code&gt;
on itself when the data set changes, and is thus auto-updating. This is extremely convenient for
the programmer, as he doesn&amp;#39;t have to worry about performing these queries himself. Further,
for bigger screens it becomes more important that you query on a separate thread since configuration
changes involve recreating the entire view layout, a complex operation that can cause disasters
when blocked.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, one could implement his or her class to load data on a separate
thread using an &lt;code&gt;AsyncTask&lt;/code&gt; or even a &lt;code&gt;Thread&lt;/code&gt;.
The point, however, is that the &lt;code&gt;LoaderManager&lt;/code&gt; does this all for you, so
it&amp;#39;s convenient for the developer, less error prone, and simple to implement. Of course
it is possible to use an &lt;code&gt;AsyncTask&lt;/code&gt; to keep your application UI thread friendly,
but it will involve a lot more code, and implementing your class so that it will retain the
loaded &lt;code&gt;Cursor&lt;/code&gt; over the twists and turns of the &lt;code&gt;Activity&lt;/code&gt; lifecycle
won&amp;#39;t be simple. The bottom line is that &lt;code&gt;LoaderManager&lt;/code&gt; will do this automatically
for you, as well as taking care of correctly creating and closing the &lt;code&gt;Cursor&lt;/code&gt;
based on the &lt;code&gt;Activity&lt;/code&gt; lifecycle.&lt;/p&gt;

&lt;p&gt;To use &lt;code&gt;LoaderManager&lt;/code&gt; with (or without) the &lt;code&gt;CursorLoader&lt;/code&gt;
in an app targeting pre-Honeycomb devices, you should make use of the classes provided
in the Android Support Package, including the &lt;code&gt;FragmentActivity&lt;/code&gt; class. A
&lt;code&gt;FragmentActivity&lt;/code&gt; is just an &lt;code&gt;Activity&lt;/code&gt; that has been created
for Android compatibility support, and does not require the use of fragments in your
application. When transitioning from an &lt;code&gt;Activity&lt;/code&gt;s to &lt;code&gt;FragmentActivity&lt;/code&gt;s,
be extremely careful that you use the &lt;code&gt;getSupportLoaderManager()&lt;/code&gt; instead of
&lt;code&gt;getLoaderManager()&lt;/code&gt;. &lt;code&gt;FragmentActivity&lt;/code&gt; extends &lt;code&gt;Activity&lt;/code&gt;,
thus inheriting all of its methods, and as a result the compiler will not complain if you
accidentally mix up these methods, so be very careful!&lt;/p&gt;

&lt;p&gt;&lt;p&gt;Leave a comment if you have any questions or criticisms... or just to let me know
that you managed to read through this entire post without getting distracted! I&amp;#39;m also
open to providing more explicit code samples if anyone asks.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Using newInstance() to Instantiate a Fragment</title>
   <link href="/2012/05/using-newinstance-to-instantiate.html"/>
   <id>/2012/05/using-newinstance-to-instantiate.html</id>
   <published>2012-05-24T00:00:00-04:00</published>
   <updated>2012-05-24T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;I recently came across an interesting question on StackOverflow regarding Fragment instantiation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;new MyFragment()&lt;/code&gt; and &lt;code&gt;MyFragment.newInstance()&lt;/code&gt;?
Should I prefer one over the other?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question. The answer, as the title of this blog suggests, is a matter of proper design. In this
case, the &lt;code&gt;newInstance()&lt;/code&gt; method is a &amp;quot;static factory method,&amp;quot; allowing us to initialize and setup a
new &lt;code&gt;Fragment&lt;/code&gt; without having to call its constructor and additional setter methods. Providing static
factory methods for your fragments is good practice because it encapsulates and abstracts the steps
required to setup the object from the client. For example, consider the following code:&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;I recently came across an interesting question on StackOverflow regarding Fragment instantiation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;What is the difference between &lt;code&gt;new MyFragment()&lt;/code&gt; and &lt;code&gt;MyFragment.newInstance()&lt;/code&gt;?
Should I prefer one over the other?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Good question. The answer, as the title of this blog suggests, is a matter of proper design. In this
case, the &lt;code&gt;newInstance()&lt;/code&gt; method is a &amp;quot;static factory method,&amp;quot; allowing us to initialize and setup a
new &lt;code&gt;Fragment&lt;/code&gt; without having to call its constructor and additional setter methods. Providing static
factory methods for your fragments is good practice because it encapsulates and abstracts the steps
required to setup the object from the client. For example, consider the following code:&lt;/p&gt;

&lt;!--more--&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Fragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Static factory method that takes an int parameter,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * initializes the fragment&amp;#39;s arguments, and returns the&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * new fragment to the client.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;putInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;index&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setArguments&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rather than having the client call the default constructor and manually set the fragment&amp;#39;s arguments
themselves, we provide a static factory method that does this for them. This is preferred over the
default constructor for two reasons. One, it&amp;#39;s convenient for the client, and two, it enforces well-defined
behavior. By providing a static factory method, we protect ourselves from bugs down the line&amp;mdash;we no
longer need to worry about accidentally forgetting to initialize the fragment&amp;#39;s arguments or incorrectly doing so.&lt;/p&gt;

&lt;p&gt;Overall, while the difference between the two is mostly just a matter of design, this difference is really
important because it provides another level of abstraction and makes code a lot easier to understand.&lt;/p&gt;

&lt;p&gt;Feel free to leave a comment if this blog post helped (it will motivate me to write more in the future)! :)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title type="html">Correctly Managing your SQLite Database</title>
   <link href="/2012/05/correctly-managing-your-sqlite-database.html"/>
   <id>/2012/05/correctly-managing-your-sqlite-database.html</id>
   <published>2012-05-21T00:00:00-04:00</published>
   <updated>2012-05-21T00:00:00-04:00</updated>
   <summary type="html">&lt;p&gt;One thing that I&amp;#39;ve noticed other Android developers having trouble with is properly
setting up their &lt;code&gt;SQLiteDatabase&lt;/code&gt;. Often times, I come across questions on StackOverflow
asking about error messages such as,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;E/Database(234): Leak found
E/Database(234): Caused by: java.lang.IllegalStateException: SQLiteDatabase created and never closed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you have probably figured out, this exception is thrown when you have opened more
&lt;code&gt;SQLiteDatabase&lt;/code&gt; instances than you have closed. Managing the database can be complicated
when first starting out with Android development, especially to those who are just beginning
to understand the &lt;code&gt;Activity&lt;/code&gt; lifecycle. The easiest solution is to make your database
instance a singleton instance across the entire application&amp;#39;s lifecycle. This will ensure
that no leaks occur, and will make your life a lot easier since it eliminates the
possibility of forgetting to close your database as you code.&lt;/p&gt;
</summary>
   <content type="html">&lt;p&gt;One thing that I&amp;#39;ve noticed other Android developers having trouble with is properly
setting up their &lt;code&gt;SQLiteDatabase&lt;/code&gt;. Often times, I come across questions on StackOverflow
asking about error messages such as,&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;E/Database(234): Leak found
E/Database(234): Caused by: java.lang.IllegalStateException: SQLiteDatabase created and never closed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you have probably figured out, this exception is thrown when you have opened more
&lt;code&gt;SQLiteDatabase&lt;/code&gt; instances than you have closed. Managing the database can be complicated
when first starting out with Android development, especially to those who are just beginning
to understand the &lt;code&gt;Activity&lt;/code&gt; lifecycle. The easiest solution is to make your database
instance a singleton instance across the entire application&amp;#39;s lifecycle. This will ensure
that no leaks occur, and will make your life a lot easier since it eliminates the
possibility of forgetting to close your database as you code.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here are two examples that illustrates three possible approaches in managing your
singleton database. These will ensure safe access to the database throughout the application.&lt;/p&gt;

&lt;h3&gt;Approach #1: Use an Abstract Factory to Instantiate the &lt;code&gt;SQLiteOpenHelper&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Declare your database helper as a static instance variable and use the Abstract Factory
pattern to guarantee the singleton property. The sample code below should give you a good
idea on how to go about designing the &lt;code&gt;DatabaseHelper&lt;/code&gt; class correctly.&lt;/p&gt;

&lt;p&gt;The static factory &lt;code&gt;getInstance()&lt;/code&gt; method ensures that only one &lt;code&gt;DatabaseHelper&lt;/code&gt;
will ever exist at any given time. If the &lt;code&gt;sInstance&lt;/code&gt; object has not been initialized,
one will be created. If one has already been created then it will simply be returned.
&lt;strong&gt;You should not initialize your helper object using with &lt;code&gt;new DatabaseHelper(context)&lt;/code&gt;!&lt;/strong&gt;
Instead, always use &lt;code&gt;DatabaseHelper.getInstance(context)&lt;/code&gt;, as it guarantees that only one
database helper will exist across the entire application&amp;#39;s lifecycle.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DatabaseHelper&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SQLiteOpenHelper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseHelper&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATABASE_NAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;database_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATABASE_TABLE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;table_name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATABASE_VERSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseHelper&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Use the application context, which will ensure that you &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// don&amp;#39;t accidentally leak an Activity&amp;#39;s context.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// See this article for more information: http://bit.ly/6LRzfx&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DatabaseHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Constructor should be private to prevent direct instantiation.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * make call to static factory method &amp;quot;getInstance()&amp;quot; instead.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DatabaseHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATABASE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DATABASE_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Approach #2: Wrap the &lt;code&gt;SQLiteDatabase&lt;/code&gt; in a &lt;code&gt;ContentProvider&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;This is also a nice approach. For one, the new &lt;code&gt;CursorLoader&lt;/code&gt; class requires
&lt;code&gt;ContentProvider&lt;/code&gt;s, so if you want an Activity or Fragment to implement &lt;code&gt;LoaderManager.LoaderCallbacks&amp;lt;Cursor&amp;gt;&lt;/code&gt;
with a &lt;code&gt;CursorLoader&lt;/code&gt; (as discussed in &lt;a href=&quot;/2012/07/understanding-loadermanager.html&quot;&gt;this post&lt;/a&gt;),
you&amp;#39;ll need to implement a &lt;code&gt;ContentProvider&lt;/code&gt; for your application. Further, you don&amp;#39;t need to worry
about making a singleton database helper with &lt;code&gt;ContentProvider&lt;/code&gt;s. Simply call &lt;code&gt;getContentResolver()&lt;/code&gt;
from the Activity and the system will take care of everything for you (in other words, there is no
need for designing a Singleton pattern to prevent multiple instances from being created).&lt;/p&gt;

&lt;p&gt;Leave a comment if this helped or if you have any questions!&lt;/p&gt;
</content>
 </entry>
 
</feed>